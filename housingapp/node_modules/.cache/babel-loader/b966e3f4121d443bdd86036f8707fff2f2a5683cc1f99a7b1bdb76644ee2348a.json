{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\promi\\\\OneDrive\\\\Documents\\\\GitHub\\\\HousingProject\\\\housingapp\\\\src\\\\RoomCountLineChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport axios from 'axios';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nfunction RoomCountLineChart({\n  userPostcode,\n  houseType\n}) {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [postcodeToSuburbMap, setPostcodeToSuburbMap] = useState({});\n  const [suburb, setSuburb] = useState('');\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/Melbourne_housing_FULL.csv`).then(response => response.text()).then(csvData => {\n      Papa.parse(csvData, {\n        header: true,\n        complete: results => {\n          const mapping = {};\n          results.data.forEach(row => {\n            if (row.Suburb && row.Postcode) {\n              mapping[row.Postcode] = row.Suburb;\n            }\n          });\n          setPostcodeToSuburbMap(mapping);\n          setSuburb(mapping[userPostcode] || userPostcode);\n        }\n      });\n    });\n  }, [userPostcode]);\n  function reverseMapHouseType(value) {\n    switch (value) {\n      case 0:\n        return 'house';\n      case 1:\n        return 'unit';\n      case 2:\n        return 'townhouse';\n      default:\n        return 'unknown';\n    }\n  }\n  useEffect(() => {\n    async function fetchPredictions() {\n      const house = reverseMapHouseType(houseType);\n      const roomCounts = [1, 2, 3, 4, 5];\n      try {\n        const response = await axios.post('http://127.0.0.1:5500/predict_room_prices', {\n          postcode: userPostcode,\n          house_type: houseType,\n          room_counts: roomCounts\n        });\n        const predictions = roomCounts.map(rooms => response.data.predictions[rooms]);\n        setChartData({\n          labels: roomCounts,\n          datasets: [{\n            label: `Predicted Price for ${house} in ${suburb}`,\n            data: predictions,\n            borderColor: 'rgba(75, 192, 192, 1)',\n            backgroundColor: 'rgba(75, 192, 192, 0.2)'\n          }]\n        });\n      } catch (error) {\n        console.error(\"Error fetching predictions:\", error);\n      }\n    }\n    if (suburb) {\n      fetchPredictions();\n    }\n  }, [userPostcode, houseType, suburb]);\n  return chartData ? /*#__PURE__*/_jsxDEV(Line, {\n    data: chartData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 21\n  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading chart...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 49\n  }, this);\n}\n_s(RoomCountLineChart, \"inl44/lB4p9T0ERjl2BN9SIqUFw=\");\n_c = RoomCountLineChart;\nexport default RoomCountLineChart;\nvar _c;\n$RefreshReg$(_c, \"RoomCountLineChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","axios","Papa","jsxDEV","_jsxDEV","register","RoomCountLineChart","userPostcode","houseType","_s","chartData","setChartData","postcodeToSuburbMap","setPostcodeToSuburbMap","suburb","setSuburb","fetch","process","env","PUBLIC_URL","then","response","text","csvData","parse","header","complete","results","mapping","data","forEach","row","Suburb","Postcode","reverseMapHouseType","value","fetchPredictions","house","roomCounts","post","postcode","house_type","room_counts","predictions","map","rooms","labels","datasets","label","borderColor","backgroundColor","error","console","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["C:/Users/promi/OneDrive/Documents/GitHub/HousingProject/housingapp/src/RoomCountLineChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport axios from 'axios';\r\nimport Papa from 'papaparse';\r\n\r\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\nfunction RoomCountLineChart({ userPostcode, houseType }) {\r\n    const [chartData, setChartData] = useState(null);\r\n    const [postcodeToSuburbMap, setPostcodeToSuburbMap] = useState({});\r\n    const [suburb, setSuburb] = useState('');\r\n\r\n    useEffect(() => {\r\n        fetch(`${process.env.PUBLIC_URL}/Melbourne_housing_FULL.csv`)\r\n            .then(response => response.text())\r\n            .then(csvData => {\r\n                Papa.parse(csvData, {\r\n                    header: true,\r\n                    complete: (results) => {\r\n                        const mapping = {};\r\n                        results.data.forEach(row => {\r\n                            if (row.Suburb && row.Postcode) {\r\n                                mapping[row.Postcode] = row.Suburb;\r\n                            }\r\n                        });\r\n                        setPostcodeToSuburbMap(mapping);\r\n                        setSuburb(mapping[userPostcode] || userPostcode);\r\n                    },\r\n                });\r\n            });\r\n    }, [userPostcode]);\r\n\r\n    function reverseMapHouseType(value) {\r\n        switch (value) {\r\n            case 0:\r\n                return 'house';\r\n            case 1:\r\n                return 'unit';\r\n            case 2:\r\n                return 'townhouse';\r\n            default:\r\n                return 'unknown';\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchPredictions() {\r\n            const house = reverseMapHouseType(houseType);\r\n            const roomCounts = [1, 2, 3, 4, 5];\r\n\r\n            try {\r\n                const response = await axios.post('http://127.0.0.1:5500/predict_room_prices', {\r\n                    postcode: userPostcode,\r\n                    house_type: houseType,\r\n                    room_counts: roomCounts,\r\n                });\r\n\r\n                const predictions = roomCounts.map((rooms) => response.data.predictions[rooms]);\r\n\r\n                setChartData({\r\n                    labels: roomCounts,\r\n                    datasets: [\r\n                        {\r\n                            label: `Predicted Price for ${house} in ${suburb}`,\r\n                            data: predictions,\r\n                            borderColor: 'rgba(75, 192, 192, 1)',\r\n                            backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n                        },\r\n                    ],\r\n                });\r\n            } catch (error) {\r\n                console.error(\"Error fetching predictions:\", error);\r\n            }\r\n        }\r\n\r\n        if (suburb) {\r\n            fetchPredictions();\r\n        }\r\n    }, [userPostcode, houseType, suburb]);\r\n\r\n    return (\r\n        chartData ? <Line data={chartData} /> : <p>Loading chart...</p>\r\n    );\r\n}\r\n\r\nexport default RoomCountLineChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}