{"ast":null,"code":"var _jsxFileName = \"C:\\\\HousingProject\\\\housingapp\\\\src\\\\GeneratedRentPredictions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport * as d3 from 'd3';\nimport './Prediction.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratedRentPrediction = () => {\n  _s();\n  const location = useLocation();\n  const {\n    suburb,\n    houseType,\n    numRooms,\n    rentalPeriod,\n    predictedPrice\n  } = location.state || {};\n  const normalizedSuburb = suburb.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  const [historicalPrices, setHistoricalPrices] = useState(null);\n  const [rentComparisons, setRentComparisons] = useState(null);\n  const svgRef = useRef(); // Reference for historical data chart\n  const comparisonSvgRef = useRef(); // Reference for rent comparison chart\n\n  useEffect(() => {\n    // Fetch historical rent prices data\n    const fetchHistoricalPrices = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/get_historical_rent_prices', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            suburb: suburb,\n            numRooms: numRooms,\n            houseType: houseType,\n            monthsBack: 6\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch historical rent prices\");\n        }\n        const data = await response.json();\n        setHistoricalPrices(data.historical_data);\n      } catch (error) {\n        console.error(\"Error fetching historical rent prices:\", error);\n      }\n    };\n\n    // Fetch rent comparison data\n    const fetchRentComparisson = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/get_rent_comparisson', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            suburb: suburb,\n            numRooms: numRooms,\n            houseType: houseType,\n            monthsAhead: rentalPeriod\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch rent comparison data\");\n        }\n        const data = await response.json();\n        setRentComparisons(data.predictions);\n      } catch (error) {\n        console.error(\"Error fetching rent comparison data:\", error);\n      }\n    };\n    fetchHistoricalPrices();\n    fetchRentComparisson();\n  }, [suburb, numRooms, houseType, rentalPeriod]);\n\n  // Historical Prices Line Chart\n  useEffect(() => {\n    if (historicalPrices) {\n      const width = 600;\n      const height = 400;\n      const margin = {\n        top: 20,\n        right: 30,\n        bottom: 70,\n        left: 60\n      };\n      const parseDate = d3.timeParse('%m-%Y');\n      const data = historicalPrices.map(d => ({\n        date: parseDate(d.date),\n        price: +d.price\n      })).filter(d => d.date);\n      const xScale = d3.scaleTime().domain(d3.extent(data, d => d.date)).range([margin.left, width - margin.right]);\n      const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d.price)]).nice().range([height - margin.bottom, margin.top]);\n      const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.price));\n      d3.select(svgRef.current).selectAll('*').remove();\n      const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n\n      // Add X axis for historical data chart\n      svg.append('g').attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(xScale).tickFormat(d3.timeFormat('%b %Y'))).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").style(\"text-anchor\", \"end\");\n\n      // Add Y axis for historical data chart\n      svg.append('g').attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(yScale));\n\n      // Add line for historical data chart\n      svg.append('path').datum(data).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2).attr('d', line);\n\n      // Add points to the line\n      svg.selectAll(\"circle\").data(data).join(\"circle\").attr(\"cx\", d => xScale(d.date)).attr(\"cy\", d => yScale(d.price)).attr(\"r\", 4).attr(\"fill\", \"steelblue\");\n    }\n  }, [historicalPrices]);\n\n  // Rent Comparison Stacked Bar Chart\n  useEffect(() => {\n    if (rentComparisons) {\n      const width = 800;\n      const height = 500;\n      const margin = {\n        top: 20,\n        right: 30,\n        bottom: 100,\n        left: 80\n      };\n\n      // Group data by suburb and prepare stacked data\n      const groupedData = d3.rollup(rentComparisons, v => {\n        var _v$find, _v$find2;\n        return {\n          Flat: ((_v$find = v.find(d => d.housing_type === \"Flat\")) === null || _v$find === void 0 ? void 0 : _v$find.price) || 0,\n          House: ((_v$find2 = v.find(d => d.housing_type === \"House\")) === null || _v$find2 === void 0 ? void 0 : _v$find2.price) || 0\n        };\n      }, d => d.suburb);\n      const suburbs = Array.from(groupedData.keys());\n      const series = d3.stack().keys([\"Flat\", \"House\"]).value(([, values], key) => values[key])(Array.from(groupedData.entries()));\n      const xScale = d3.scaleBand().domain(suburbs).range([margin.left, width - margin.right]).padding(0.2);\n      const yScale = d3.scaleLinear().domain([0, d3.max(series[series.length - 1], d => d[1])]).nice().range([height - margin.bottom, margin.top]);\n      const colorScale = d3.scaleOrdinal().domain([\"Flat\", \"House\"]).range([\"#1f77b4\", \"#ff7f0e\"]);\n      d3.select(comparisonSvgRef.current).selectAll('*').remove();\n      const svg = d3.select(comparisonSvgRef.current).attr('width', width).attr('height', height);\n\n      // Add X axis for rent comparison chart\n      svg.append('g').attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(xScale)).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").style(\"text-anchor\", \"end\");\n\n      // Add Y axis for rent comparison chart\n      svg.append('g').attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(yScale)).append(\"text\").attr(\"fill\", \"black\").attr(\"x\", -margin.left).attr(\"y\", margin.top - 10).attr(\"text-anchor\", \"start\").text(\"Price per week (AUD)\");\n\n      // Add stacked bars for rent comparison chart\n      svg.append(\"g\").selectAll(\"g\").data(series).join(\"g\").attr(\"fill\", d => colorScale(d.key)).selectAll(\"rect\").data(d => d).join(\"rect\").attr(\"x\", d => xScale(d.data[0])).attr(\"y\", d => yScale(d[1])).attr(\"height\", d => yScale(d[0]) - yScale(d[1])).attr(\"width\", xScale.bandwidth());\n\n      // Add legend for rent comparison chart\n      const legend = svg.append(\"g\").attr(\"transform\", `translate(${width - margin.right - 120}, ${margin.top})`);\n      legend.selectAll(\"rect\").data([\"Flat\", \"House\"]).join(\"rect\").attr(\"x\", 0).attr(\"y\", (d, i) => i * 20).attr(\"width\", 15).attr(\"height\", 15).attr(\"fill\", d => colorScale(d));\n      legend.selectAll(\"text\").data([\"Flat\", \"House\"]).join(\"text\").attr(\"x\", 20).attr(\"y\", (d, i) => i * 20 + 12).text(d => d);\n    }\n  }, [rentComparisons]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prediction-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Generated rent predictions for a \", numRooms, \" bedroom \", houseType, \" in \", normalizedSuburb, \" for the next \", rentalPeriod, \" months\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Average rent per week would be \", predictedPrice, \" AUD\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"historical-price-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Historical Rent Prices (last 6 months):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rent-comparison-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Rent Comparisons in Nearby Suburbs:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: comparisonSvgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 9\n  }, this);\n};\n_s(GeneratedRentPrediction, \"POSTp8qm/LYbEiAmRdfuoTj/P+Y=\", false, function () {\n  return [useLocation];\n});\n_c = GeneratedRentPrediction;\nexport default GeneratedRentPrediction;\nvar _c;\n$RefreshReg$(_c, \"GeneratedRentPrediction\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","d3","jsxDEV","_jsxDEV","GeneratedRentPrediction","_s","location","suburb","houseType","numRooms","rentalPeriod","predictedPrice","state","normalizedSuburb","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","historicalPrices","setHistoricalPrices","rentComparisons","setRentComparisons","svgRef","comparisonSvgRef","fetchHistoricalPrices","response","fetch","method","headers","body","JSON","stringify","monthsBack","ok","Error","data","json","historical_data","error","console","fetchRentComparisson","monthsAhead","predictions","width","height","margin","top","right","bottom","left","parseDate","timeParse","d","date","price","filter","xScale","scaleTime","domain","extent","range","yScale","scaleLinear","max","nice","line","x","y","select","current","selectAll","remove","svg","attr","append","call","axisBottom","tickFormat","timeFormat","style","axisLeft","datum","groupedData","rollup","v","_v$find","_v$find2","Flat","find","housing_type","House","suburbs","Array","from","keys","series","stack","value","values","key","entries","scaleBand","padding","length","colorScale","scaleOrdinal","text","bandwidth","legend","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/HousingProject/housingapp/src/GeneratedRentPredictions.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as d3 from 'd3';\r\nimport './Prediction.css';\r\n\r\nconst GeneratedRentPrediction = () => {\r\n    const location = useLocation();\r\n    const { suburb, houseType, numRooms, rentalPeriod, predictedPrice } = location.state || {};\r\n    const normalizedSuburb = suburb\r\n        .toLowerCase()\r\n        .split(' ')\r\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(' ');\r\n\r\n    const [historicalPrices, setHistoricalPrices] = useState(null);\r\n    const [rentComparisons, setRentComparisons] = useState(null);\r\n    const svgRef = useRef(); // Reference for historical data chart\r\n    const comparisonSvgRef = useRef(); // Reference for rent comparison chart\r\n\r\n    useEffect(() => {\r\n        // Fetch historical rent prices data\r\n        const fetchHistoricalPrices = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:8000/get_historical_rent_prices', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        suburb: suburb,\r\n                        numRooms: numRooms,\r\n                        houseType: houseType,\r\n                        monthsBack: 6,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed to fetch historical rent prices\");\r\n                }\r\n                const data = await response.json();\r\n                setHistoricalPrices(data.historical_data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching historical rent prices:\", error);\r\n            }\r\n        };\r\n\r\n        // Fetch rent comparison data\r\n        const fetchRentComparisson = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:8000/get_rent_comparisson', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        suburb: suburb,\r\n                        numRooms: numRooms,\r\n                        houseType: houseType,\r\n                        monthsAhead: rentalPeriod,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed to fetch rent comparison data\");\r\n                }\r\n                const data = await response.json();\r\n                setRentComparisons(data.predictions);\r\n            } catch (error) {\r\n                console.error(\"Error fetching rent comparison data:\", error);\r\n            }\r\n        };\r\n\r\n        fetchHistoricalPrices();\r\n        fetchRentComparisson();\r\n    }, [suburb, numRooms, houseType, rentalPeriod]);\r\n\r\n    // Historical Prices Line Chart\r\n    useEffect(() => {\r\n        if (historicalPrices) {\r\n            const width = 600;\r\n            const height = 400;\r\n            const margin = { top: 20, right: 30, bottom: 70, left: 60 };\r\n\r\n            const parseDate = d3.timeParse('%m-%Y');\r\n            const data = historicalPrices\r\n                .map(d => ({\r\n                    date: parseDate(d.date),\r\n                    price: +d.price,\r\n                }))\r\n                .filter(d => d.date);\r\n\r\n            const xScale = d3.scaleTime()\r\n                .domain(d3.extent(data, d => d.date))\r\n                .range([margin.left, width - margin.right]);\r\n\r\n            const yScale = d3.scaleLinear()\r\n                .domain([0, d3.max(data, d => d.price)]).nice()\r\n                .range([height - margin.bottom, margin.top]);\r\n\r\n            const line = d3.line()\r\n                .x(d => xScale(d.date))\r\n                .y(d => yScale(d.price));\r\n\r\n            d3.select(svgRef.current).selectAll('*').remove();\r\n\r\n            const svg = d3.select(svgRef.current)\r\n                .attr('width', width)\r\n                .attr('height', height);\r\n\r\n            // Add X axis for historical data chart\r\n            svg.append('g')\r\n                .attr('transform', `translate(0,${height - margin.bottom})`)\r\n                .call(d3.axisBottom(xScale).tickFormat(d3.timeFormat('%b %Y')))\r\n                .selectAll(\"text\")\r\n                .attr(\"transform\", \"rotate(-45)\")\r\n                .style(\"text-anchor\", \"end\");\r\n\r\n            // Add Y axis for historical data chart\r\n            svg.append('g')\r\n                .attr('transform', `translate(${margin.left},0)`)\r\n                .call(d3.axisLeft(yScale));\r\n\r\n            // Add line for historical data chart\r\n            svg.append('path')\r\n                .datum(data)\r\n                .attr('fill', 'none')\r\n                .attr('stroke', 'steelblue')\r\n                .attr('stroke-width', 2)\r\n                .attr('d', line);\r\n\r\n            // Add points to the line\r\n            svg.selectAll(\"circle\")\r\n                .data(data)\r\n                .join(\"circle\")\r\n                .attr(\"cx\", d => xScale(d.date))\r\n                .attr(\"cy\", d => yScale(d.price))\r\n                .attr(\"r\", 4)\r\n                .attr(\"fill\", \"steelblue\");\r\n        }\r\n    }, [historicalPrices]);\r\n\r\n    // Rent Comparison Stacked Bar Chart\r\n    useEffect(() => {\r\n        if (rentComparisons) {\r\n            const width = 800;\r\n            const height = 500;\r\n            const margin = { top: 20, right: 30, bottom: 100, left: 80 };\r\n\r\n            // Group data by suburb and prepare stacked data\r\n            const groupedData = d3.rollup(\r\n                rentComparisons,\r\n                v => ({\r\n                    Flat: v.find(d => d.housing_type === \"Flat\")?.price || 0,\r\n                    House: v.find(d => d.housing_type === \"House\")?.price || 0,\r\n                }),\r\n                d => d.suburb\r\n            );\r\n\r\n            const suburbs = Array.from(groupedData.keys());\r\n            const series = d3.stack()\r\n                .keys([\"Flat\", \"House\"])\r\n                .value(([, values], key) => values[key])\r\n                (Array.from(groupedData.entries()));\r\n\r\n            const xScale = d3.scaleBand()\r\n                .domain(suburbs)\r\n                .range([margin.left, width - margin.right])\r\n                .padding(0.2);\r\n\r\n            const yScale = d3.scaleLinear()\r\n                .domain([0, d3.max(series[series.length - 1], d => d[1])]).nice()\r\n                .range([height - margin.bottom, margin.top]);\r\n\r\n            const colorScale = d3.scaleOrdinal()\r\n                .domain([\"Flat\", \"House\"])\r\n                .range([\"#1f77b4\", \"#ff7f0e\"]);\r\n\r\n            d3.select(comparisonSvgRef.current).selectAll('*').remove();\r\n\r\n            const svg = d3.select(comparisonSvgRef.current)\r\n                .attr('width', width)\r\n                .attr('height', height);\r\n\r\n            // Add X axis for rent comparison chart\r\n            svg.append('g')\r\n                .attr('transform', `translate(0,${height - margin.bottom})`)\r\n                .call(d3.axisBottom(xScale))\r\n                .selectAll(\"text\")\r\n                .attr(\"transform\", \"rotate(-45)\")\r\n                .style(\"text-anchor\", \"end\");\r\n\r\n            // Add Y axis for rent comparison chart\r\n            svg.append('g')\r\n                .attr('transform', `translate(${margin.left},0)`)\r\n                .call(d3.axisLeft(yScale))\r\n                .append(\"text\")\r\n                .attr(\"fill\", \"black\")\r\n                .attr(\"x\", -margin.left)\r\n                .attr(\"y\", margin.top - 10)\r\n                .attr(\"text-anchor\", \"start\")\r\n                .text(\"Price per week (AUD)\");\r\n\r\n            // Add stacked bars for rent comparison chart\r\n            svg.append(\"g\")\r\n                .selectAll(\"g\")\r\n                .data(series)\r\n                .join(\"g\")\r\n                .attr(\"fill\", d => colorScale(d.key))\r\n                .selectAll(\"rect\")\r\n                .data(d => d)\r\n                .join(\"rect\")\r\n                .attr(\"x\", d => xScale(d.data[0]))\r\n                .attr(\"y\", d => yScale(d[1]))\r\n                .attr(\"height\", d => yScale(d[0]) - yScale(d[1]))\r\n                .attr(\"width\", xScale.bandwidth());\r\n\r\n            // Add legend for rent comparison chart\r\n            const legend = svg.append(\"g\")\r\n                .attr(\"transform\", `translate(${width - margin.right - 120}, ${margin.top})`);\r\n\r\n            legend.selectAll(\"rect\")\r\n                .data([\"Flat\", \"House\"])\r\n                .join(\"rect\")\r\n                .attr(\"x\", 0)\r\n                .attr(\"y\", (d, i) => i * 20)\r\n                .attr(\"width\", 15)\r\n                .attr(\"height\", 15)\r\n                .attr(\"fill\", d => colorScale(d));\r\n\r\n            legend.selectAll(\"text\")\r\n                .data([\"Flat\", \"House\"])\r\n                .join(\"text\")\r\n                .attr(\"x\", 20)\r\n                .attr(\"y\", (d, i) => i * 20 + 12)\r\n                .text(d => d);\r\n        }\r\n    }, [rentComparisons]);\r\n\r\n    return (\r\n        <div className='prediction-container'>\r\n            <h2>\r\n                Generated rent predictions for a {numRooms} bedroom {houseType} in {normalizedSuburb} for the next {rentalPeriod} months\r\n            </h2>\r\n            <h3>Average rent per week would be {predictedPrice} AUD</h3>\r\n            <div className='historical-price-chart'>\r\n                <h4>Historical Rent Prices (last 6 months):</h4>\r\n                <svg ref={svgRef}></svg>\r\n            </div>\r\n            <div className='rent-comparison-chart'>\r\n                <h4>Rent Comparisons in Nearby Suburbs:</h4>\r\n                <svg ref={comparisonSvgRef}></svg>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneratedRentPrediction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}