{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\promi\\\\OneDrive\\\\Documents\\\\GitHub\\\\HousingProject\\\\housingapp\\\\src\\\\SalesPredictions.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getPrediction } from './salesapi';\nimport { useNavigate } from 'react-router-dom';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SalesPred() {\n  _s();\n  const [suburb, setSuburb] = useState('');\n  const [postcode, setPostcode] = useState('');\n  const [rooms, setRooms] = useState('');\n  const [houseType, setHouseType] = useState('');\n  const [suburbToPostcodeMap, setSuburbToPostcodeMap] = useState({});\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/Melbourne_housing_FULL.csv`).then(response => response.text()).then(csvData => {\n      Papa.parse(csvData, {\n        header: true,\n        complete: results => {\n          const mapping = {};\n          results.data.forEach(row => {\n            if (row.Suburb && row.Postcode) {\n              mapping[row.Suburb.toLowerCase()] = row.Postcode;\n            }\n          });\n          setSuburbToPostcodeMap(mapping);\n        }\n      });\n    });\n  }, []);\n  const mapHouseTypeToModelValue = type => {\n    switch (type) {\n      case 'house':\n        return 0;\n      case 'unit':\n        return 1;\n      case 'townhouse':\n        return 2;\n      default:\n        return null;\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const postcodeFromSuburb = suburbToPostcodeMap[suburb.toLowerCase()];\n    if (!postcodeFromSuburb) {\n      alert(\"Invalid suburb name. Please enter a valid suburb.\");\n      return;\n    }\n    setPostcode(postcodeFromSuburb);\n    const houseTypeValue = mapHouseTypeToModelValue(houseType);\n    if (houseTypeValue === null) {\n      alert(\"Please select a valid house type\");\n      return;\n    }\n    const inputData = {\n      postcode: postcodeFromSuburb,\n      rooms: parseInt(rooms),\n      house_type: houseTypeValue\n    };\n    const result = await getPrediction(inputData);\n    if (result && result.prediction) {\n      const prediction = parseFloat(result.prediction).toFixed(2);\n      navigate('/generated-sales-prediction', {\n        state: {\n          prediction: prediction,\n          postcode: postcodeFromSuburb,\n          rooms: parseInt(rooms),\n          houseType: houseTypeValue\n        }\n      });\n    } else {\n      console.error(\"Failed to get prediction.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Enter Details for Sales Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enter Suburb:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: suburb,\n          onChange: e => setSuburb(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Enter Number of Rooms:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: rooms,\n          onChange: e => setRooms(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select House Type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: houseType,\n          onChange: e => setHouseType(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"house\",\n            children: \"House\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"unit\",\n            children: \"Unit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"townhouse\",\n            children: \"Townhouse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Prediction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n_s(SalesPred, \"Snt4VLIPUpW8h6bYQqvzodZqD0A=\", false, function () {\n  return [useNavigate];\n});\n_c = SalesPred;\nexport default SalesPred;\nvar _c;\n$RefreshReg$(_c, \"SalesPred\");","map":{"version":3,"names":["React","useState","useEffect","getPrediction","useNavigate","Papa","jsxDEV","_jsxDEV","SalesPred","_s","suburb","setSuburb","postcode","setPostcode","rooms","setRooms","houseType","setHouseType","suburbToPostcodeMap","setSuburbToPostcodeMap","navigate","fetch","process","env","PUBLIC_URL","then","response","text","csvData","parse","header","complete","results","mapping","data","forEach","row","Suburb","Postcode","toLowerCase","mapHouseTypeToModelValue","type","handleSubmit","event","preventDefault","postcodeFromSuburb","alert","houseTypeValue","inputData","parseInt","house_type","result","prediction","parseFloat","toFixed","state","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/promi/OneDrive/Documents/GitHub/HousingProject/housingapp/src/SalesPredictions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { getPrediction } from './salesapi';\nimport { useNavigate } from 'react-router-dom';\nimport Papa from 'papaparse';\n\nfunction SalesPred() {\n    const [suburb, setSuburb] = useState('');\n    const [postcode, setPostcode] = useState('');\n    const [rooms, setRooms] = useState('');\n    const [houseType, setHouseType] = useState('');\n    const [suburbToPostcodeMap, setSuburbToPostcodeMap] = useState({});\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        fetch(`${process.env.PUBLIC_URL}/Melbourne_housing_FULL.csv`)\n            .then(response => response.text())\n            .then(csvData => {\n                Papa.parse(csvData, {\n                    header: true,\n                    complete: (results) => {\n                        const mapping = {};\n                        results.data.forEach(row => {\n                            if (row.Suburb && row.Postcode) {\n                                mapping[row.Suburb.toLowerCase()] = row.Postcode;\n                            }\n                        });\n                        setSuburbToPostcodeMap(mapping);\n                    },\n                });\n            });\n    }, []);\n\n    const mapHouseTypeToModelValue = (type) => {\n        switch (type) {\n            case 'house':\n                return 0;\n            case 'unit':\n                return 1;\n            case 'townhouse':\n                return 2;\n            default:\n                return null;\n        }\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n\n        const postcodeFromSuburb = suburbToPostcodeMap[suburb.toLowerCase()];\n        \n        if (!postcodeFromSuburb) {\n            alert(\"Invalid suburb name. Please enter a valid suburb.\");\n            return;\n        }\n\n        setPostcode(postcodeFromSuburb);\n\n        const houseTypeValue = mapHouseTypeToModelValue(houseType);\n\n        if (houseTypeValue === null) {\n            alert(\"Please select a valid house type\");\n            return;\n        }\n\n        const inputData = {\n            postcode: postcodeFromSuburb,\n            rooms: parseInt(rooms),\n            house_type: houseTypeValue\n        };\n\n        const result = await getPrediction(inputData);\n\n        if (result && result.prediction) {\n            const prediction = parseFloat(result.prediction).toFixed(2);\n\n            navigate('/generated-sales-prediction', {\n                state: {\n                    prediction: prediction,\n                    postcode: postcodeFromSuburb,\n                    rooms: parseInt(rooms),\n                    houseType: houseTypeValue\n                }\n            });\n        } else {\n            console.error(\"Failed to get prediction.\");\n        }\n    };\n\n    return (\n        <div>\n            <h1>Enter Details for Sales Prediction</h1>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Enter Suburb:\n                    <input\n                        type=\"text\"\n                        value={suburb}\n                        onChange={(e) => setSuburb(e.target.value)}\n                    />\n                </label>\n                <br />\n                <label>\n                    Enter Number of Rooms:\n                    <input\n                        type=\"number\"\n                        value={rooms}\n                        onChange={(e) => setRooms(e.target.value)}\n                    />\n                </label>\n                <br />\n                <label>\n                    Select House Type:\n                    <select\n                        value={houseType}\n                        onChange={(e) => setHouseType(e.target.value)}\n                    >\n                        <option value=\"\">Select Type</option>\n                        <option value=\"house\">House</option>\n                        <option value=\"unit\">Unit</option>\n                        <option value=\"townhouse\">Townhouse</option>\n                    </select>\n                </label>\n                <br />\n                <button type=\"submit\">Get Prediction</button>\n            </form>\n        </div>\n    );\n}\n\nexport default SalesPred;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}