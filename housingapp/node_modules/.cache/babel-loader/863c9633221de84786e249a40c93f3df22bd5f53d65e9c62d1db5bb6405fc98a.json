{"ast":null,"code":"var _jsxFileName = \"C:\\\\HousingProject\\\\housingapp\\\\src\\\\PostcodePriceBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport axios from 'axios';\nimport Papa from 'papaparse';\nimport './PostcodePriceBarChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nfunction PostcodePriceBarChart({\n  userPostcode,\n  userRooms,\n  userHouseType\n}) {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [postcodeToSuburbMap, setPostcodeToSuburbMap] = useState({});\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/Melbourne_housing_FULL.csv`).then(response => response.text()).then(csvData => {\n      Papa.parse(csvData, {\n        header: true,\n        complete: results => {\n          const mapping = {};\n          results.data.forEach(row => {\n            if (row.Suburb && row.Postcode) {\n              mapping[row.Postcode] = row.Suburb;\n            }\n          });\n          setPostcodeToSuburbMap(mapping);\n        }\n      });\n    });\n  }, []);\n  function reverseMapHouseType(value) {\n    switch (value) {\n      case 0:\n        return 'house';\n      case 1:\n        return 'unit';\n      case 2:\n        return 'townhouse';\n      default:\n        return 'unknown';\n    }\n  }\n  useEffect(() => {\n    async function fetchPredictions() {\n      const house = reverseMapHouseType(userHouseType);\n      const postcodes = [userPostcode, '3011', '3166', '3206', '3145', '3183', '3071', '3044'];\n      try {\n        const response = await axios.post('http://127.0.0.1:5500/predict_postcode_prices', {\n          postcode: postcodes,\n          house_type: userHouseType,\n          room_counts: userRooms\n        });\n        const predictions = postcodes.map(postcode => response.data.predictions[postcode]);\n        const labels = postcodes.map(pc => postcodeToSuburbMap[pc] || pc);\n        setChartData({\n          labels: labels,\n          datasets: [{\n            label: `Predicted Price for ${userRooms} Room(s) - ${house}`,\n            data: predictions,\n            backgroundColor: postcodes.map(pc => pc === userPostcode ? 'rgba(255, 99, 132, 0.6)' : 'rgba(54, 162, 235, 0.6)')\n          }]\n        });\n      } catch (error) {\n        console.error(\"Error fetching predictions:\", error);\n      }\n    }\n    fetchPredictions();\n  }, [userPostcode, userRooms, userHouseType, postcodeToSuburbMap]);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Predicted Prices by Suburb'\n      }\n    }\n  };\n  return chartData ? /*#__PURE__*/_jsxDEV(Bar, {\n    data: chartData,\n    options: options\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 24\n  }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 69\n  }, this);\n}\n_s(PostcodePriceBarChart, \"Nnbdz4+fFDM6JGvSrWvzzl6YX88=\");\n_c = PostcodePriceBarChart;\nexport default PostcodePriceBarChart;\nvar _c;\n$RefreshReg$(_c, \"PostcodePriceBarChart\");","map":{"version":3,"names":["React","useState","useEffect","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","axios","Papa","jsxDEV","_jsxDEV","register","PostcodePriceBarChart","userPostcode","userRooms","userHouseType","_s","chartData","setChartData","postcodeToSuburbMap","setPostcodeToSuburbMap","fetch","process","env","PUBLIC_URL","then","response","text","csvData","parse","header","complete","results","mapping","data","forEach","row","Suburb","Postcode","reverseMapHouseType","value","fetchPredictions","house","postcodes","post","postcode","house_type","room_counts","predictions","map","labels","pc","datasets","label","backgroundColor","error","console","options","responsive","plugins","legend","position","title","display","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["C:/HousingProject/housingapp/src/PostcodePriceBarChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\r\nimport axios from 'axios';\r\nimport Papa from 'papaparse';\r\nimport './PostcodePriceBarChart.css';\r\n\r\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\nfunction PostcodePriceBarChart({ userPostcode, userRooms, userHouseType }) {\r\n    const [chartData, setChartData] = useState(null);\r\n    const [postcodeToSuburbMap, setPostcodeToSuburbMap] = useState({});\r\n\r\n    useEffect(() => {\r\n        fetch(`${process.env.PUBLIC_URL}/Melbourne_housing_FULL.csv`)\r\n            .then(response => response.text())\r\n            .then(csvData => {\r\n                Papa.parse(csvData, {\r\n                    header: true,\r\n                    complete: (results) => {\r\n                        const mapping = {};\r\n                        results.data.forEach(row => {\r\n                            if (row.Suburb && row.Postcode) {\r\n                                mapping[row.Postcode] = row.Suburb;\r\n                            }\r\n                        });\r\n                        setPostcodeToSuburbMap(mapping);\r\n                    },\r\n                });\r\n            });\r\n    }, []);\r\n\r\n    function reverseMapHouseType(value) {\r\n        switch (value) {\r\n            case 0:\r\n                return 'house';\r\n            case 1:\r\n                return 'unit';\r\n            case 2:\r\n                return 'townhouse';\r\n            default:\r\n                return 'unknown';\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function fetchPredictions() {\r\n            const house = reverseMapHouseType(userHouseType);\r\n            const postcodes = [userPostcode, '3011', '3166', '3206', '3145', '3183', '3071', '3044'];\r\n\r\n            try {\r\n                const response = await axios.post('http://127.0.0.1:5500/predict_postcode_prices', {\r\n                    postcode: postcodes,\r\n                    house_type: userHouseType,\r\n                    room_counts: userRooms,\r\n                });\r\n                const predictions = postcodes.map((postcode) => response.data.predictions[postcode]);\r\n\r\n                const labels = postcodes.map(pc => postcodeToSuburbMap[pc] || pc);\r\n\r\n                setChartData({\r\n                    labels: labels,\r\n                    datasets: [\r\n                        {\r\n                            label: `Predicted Price for ${userRooms} Room(s) - ${house}`,\r\n                            data: predictions,\r\n                            backgroundColor: postcodes.map((pc) =>\r\n                                pc === userPostcode ? 'rgba(255, 99, 132, 0.6)' : 'rgba(54, 162, 235, 0.6)'\r\n                            ),\r\n                        },\r\n                    ],\r\n                });\r\n            } catch (error) {\r\n                console.error(\"Error fetching predictions:\", error);\r\n            }\r\n        }\r\n\r\n        fetchPredictions();\r\n    }, [userPostcode, userRooms, userHouseType, postcodeToSuburbMap]);\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: { position: 'top' },\r\n            title: { display: true, text: 'Predicted Prices by Suburb' },\r\n        },\r\n    };\r\n\r\n    return chartData ? <Bar data={chartData} options={options} /> : <p>Loading...</p>;\r\n}\r\n\r\nexport default PostcodePriceBarChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}