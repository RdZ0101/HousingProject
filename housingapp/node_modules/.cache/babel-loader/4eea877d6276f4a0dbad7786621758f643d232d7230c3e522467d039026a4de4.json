{"ast":null,"code":"var _jsxFileName = \"C:\\\\HousingProject\\\\housingapp\\\\src\\\\GeneratedRentPredictions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport * as d3 from 'd3';\nimport './Prediction.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratedRentPrediction = () => {\n  _s();\n  const location = useLocation();\n  const {\n    suburb,\n    houseType,\n    numRooms,\n    rentalPeriod,\n    predictedPrice\n  } = location.state || {};\n  const normalizedSuburb = suburb.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  const [historicalPrices, setHistoricalPrices] = useState(null);\n  const svgRef = useRef(); // Reference for D3 chart\n\n  useEffect(() => {\n    const fetchHistoricalPrices = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/getHistoricalRentPrices', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            suburb: suburb,\n            numRooms: numRooms,\n            houseType: houseType,\n            monthsBack: 6\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch historical rent prices\");\n        }\n        const data = await response.json();\n        setHistoricalPrices(data.historical_data);\n      } catch (error) {\n        console.error(\"Error fetching historical rent prices:\", error);\n      }\n    };\n    fetchHistoricalPrices();\n  }, [suburb, numRooms, houseType]);\n\n  // Set up D3 chart after data is fetched\n  useEffect(() => {\n    if (historicalPrices) {\n      // Define dimensions and margins\n      const width = 500;\n      const height = 300;\n      const margin = {\n        top: 20,\n        right: 30,\n        bottom: 50,\n        left: 50\n      };\n\n      // Parse dates and format data for D3\n      const parseDate = d3.timeParse('%Y-%m');\n      const data = historicalPrices.map(d => ({\n        date: parseDate(d.date),\n        price: d.price\n      }));\n\n      // Define scales\n      const xScale = d3.scaleTime().domain(d3.extent(data, d => d.date)).range([margin.left, width - margin.right]);\n      const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d.price)]).nice().range([height - margin.bottom, margin.top]);\n\n      // Create the line generator\n      const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.price));\n\n      // Clear previous svg content if any\n      d3.select(svgRef.current).selectAll('*').remove();\n\n      // Create the SVG container\n      const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n\n      // Add X axis\n      svg.append('g').attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(xScale).tickFormat(d3.timeFormat('%b %Y'))).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").style(\"text-anchor\", \"end\");\n\n      // Add Y axis\n      svg.append('g').attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(yScale));\n\n      // Add line path\n      svg.append('path').datum(data).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2).attr('d', line);\n\n      // Add points to the line\n      svg.selectAll(\"circle\").data(data).join(\"circle\").attr(\"cx\", d => xScale(d.date)).attr(\"cy\", d => yScale(d.price)).attr(\"r\", 4).attr(\"fill\", \"steelblue\");\n    }\n  }, [historicalPrices]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prediction-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Generated rent predictions for a \", numRooms, \" bedroom \", houseType, \" in \", normalizedSuburb, \" for the next \", rentalPeriod, \" months\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Average rent per week would be \", predictedPrice, \" AUD\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Historical Rent Prices (last 6 months):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n};\n_s(GeneratedRentPrediction, \"Z1GjUC51I5/wP2tcHdWh+9vtd2Q=\", false, function () {\n  return [useLocation];\n});\n_c = GeneratedRentPrediction;\nexport default GeneratedRentPrediction;\nvar _c;\n$RefreshReg$(_c, \"GeneratedRentPrediction\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","d3","jsxDEV","_jsxDEV","GeneratedRentPrediction","_s","location","suburb","houseType","numRooms","rentalPeriod","predictedPrice","state","normalizedSuburb","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","historicalPrices","setHistoricalPrices","svgRef","fetchHistoricalPrices","response","fetch","method","headers","body","JSON","stringify","monthsBack","ok","Error","data","json","historical_data","error","console","width","height","margin","top","right","bottom","left","parseDate","timeParse","d","date","price","xScale","scaleTime","domain","extent","range","yScale","scaleLinear","max","nice","line","x","y","select","current","selectAll","remove","svg","attr","append","call","axisBottom","tickFormat","timeFormat","style","axisLeft","datum","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/HousingProject/housingapp/src/GeneratedRentPredictions.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as d3 from 'd3';\r\nimport './Prediction.css';\r\n\r\nconst GeneratedRentPrediction = () => {\r\n    const location = useLocation();\r\n    const { suburb, houseType, numRooms, rentalPeriod, predictedPrice } = location.state || {};\r\n    const normalizedSuburb = suburb\r\n        .toLowerCase()\r\n        .split(' ')\r\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(' ');\r\n\r\n    const [historicalPrices, setHistoricalPrices] = useState(null);\r\n    const svgRef = useRef(); // Reference for D3 chart\r\n\r\n    useEffect(() => {\r\n        const fetchHistoricalPrices = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:8000/getHistoricalRentPrices', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        suburb: suburb,\r\n                        numRooms: numRooms,\r\n                        houseType: houseType,\r\n                        monthsBack: 6,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed to fetch historical rent prices\");\r\n                }\r\n                const data = await response.json();\r\n                setHistoricalPrices(data.historical_data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching historical rent prices:\", error);\r\n            }\r\n        };\r\n\r\n        fetchHistoricalPrices();\r\n    }, [suburb, numRooms, houseType]);\r\n\r\n    // Set up D3 chart after data is fetched\r\n    useEffect(() => {\r\n        if (historicalPrices) {\r\n            // Define dimensions and margins\r\n            const width = 500;\r\n            const height = 300;\r\n            const margin = { top: 20, right: 30, bottom: 50, left: 50 };\r\n\r\n            // Parse dates and format data for D3\r\n            const parseDate = d3.timeParse('%Y-%m');\r\n            const data = historicalPrices.map(d => ({\r\n                date: parseDate(d.date),\r\n                price: d.price\r\n            }));\r\n\r\n            // Define scales\r\n            const xScale = d3.scaleTime()\r\n                .domain(d3.extent(data, d => d.date))\r\n                .range([margin.left, width - margin.right]);\r\n\r\n            const yScale = d3.scaleLinear()\r\n                .domain([0, d3.max(data, d => d.price)]).nice()\r\n                .range([height - margin.bottom, margin.top]);\r\n\r\n            // Create the line generator\r\n            const line = d3.line()\r\n                .x(d => xScale(d.date))\r\n                .y(d => yScale(d.price));\r\n\r\n            // Clear previous svg content if any\r\n            d3.select(svgRef.current).selectAll('*').remove();\r\n\r\n            // Create the SVG container\r\n            const svg = d3.select(svgRef.current)\r\n                .attr('width', width)\r\n                .attr('height', height);\r\n\r\n            // Add X axis\r\n            svg.append('g')\r\n                .attr('transform', `translate(0,${height - margin.bottom})`)\r\n                .call(d3.axisBottom(xScale).tickFormat(d3.timeFormat('%b %Y')))\r\n                .selectAll(\"text\")\r\n                .attr(\"transform\", \"rotate(-45)\")\r\n                .style(\"text-anchor\", \"end\");\r\n\r\n            // Add Y axis\r\n            svg.append('g')\r\n                .attr('transform', `translate(${margin.left},0)`)\r\n                .call(d3.axisLeft(yScale));\r\n\r\n            // Add line path\r\n            svg.append('path')\r\n                .datum(data)\r\n                .attr('fill', 'none')\r\n                .attr('stroke', 'steelblue')\r\n                .attr('stroke-width', 2)\r\n                .attr('d', line);\r\n            \r\n            // Add points to the line\r\n            svg.selectAll(\"circle\")\r\n                .data(data)\r\n                .join(\"circle\")\r\n                .attr(\"cx\", d => xScale(d.date))\r\n                .attr(\"cy\", d => yScale(d.price))\r\n                .attr(\"r\", 4)\r\n                .attr(\"fill\", \"steelblue\");\r\n\r\n        }\r\n    }, [historicalPrices]);\r\n\r\n    return (\r\n        <div className='prediction-container'>\r\n            <h2>\r\n                Generated rent predictions for a {numRooms} bedroom {houseType} in {normalizedSuburb} for the next {rentalPeriod} months\r\n            </h2>\r\n            <h3>Average rent per week would be {predictedPrice} AUD</h3>\r\n            <div>\r\n                <h4>Historical Rent Prices (last 6 months):</h4>\r\n                <svg ref={svgRef}></svg>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneratedRentPrediction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}