{"ast":null,"code":"var _jsxFileName = \"C:\\\\HousingProject\\\\housingapp\\\\src\\\\GeneratedRentPredictions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport * as d3 from 'd3';\nimport './Prediction.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratedRentPrediction = () => {\n  _s();\n  const location = useLocation();\n  const {\n    suburb,\n    houseType,\n    numRooms,\n    rentalPeriod,\n    predictedPrice\n  } = location.state || {};\n  const normalizedSuburb = suburb.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  const [historicalPrices, setHistoricalPrices] = useState(null);\n  const svgRef = useRef(); // Reference for D3 line chart\n  const barSvgRef = useRef(); // Reference for D3 bar chart\n\n  useEffect(() => {\n    const fetchHistoricalPrices = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/getHistoricalRentPrices', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            suburb: suburb,\n            numRooms: numRooms,\n            houseType: houseType,\n            monthsBack: 6\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch historical rent prices\");\n        }\n        const data = await response.json();\n        setHistoricalPrices(data.historical_data);\n      } catch (error) {\n        console.error(\"Error fetching historical rent prices:\", error);\n      }\n    };\n    fetchHistoricalPrices();\n  }, [suburb, numRooms, houseType]);\n\n  // Render existing line chart (as provided in previous code)\n  useEffect(() => {\n    if (historicalPrices) {\n      const width = 600;\n      const height = 400;\n      const margin = {\n        top: 20,\n        right: 30,\n        bottom: 70,\n        left: 60\n      };\n      const parseDate = d3.timeParse('%m-%Y');\n      const data = historicalPrices.map(d => ({\n        date: parseDate(d.date),\n        price: +d.price\n      })).filter(d => d.date);\n      const xScale = d3.scaleTime().domain(d3.extent(data, d => d.date)).range([margin.left, width - margin.right]);\n      const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d.price)]).nice().range([height - margin.bottom, margin.top]);\n      const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.price));\n      d3.select(svgRef.current).selectAll('*').remove();\n      const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n      svg.append('g').attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(xScale).tickFormat(d3.timeFormat('%b %Y'))).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").style(\"text-anchor\", \"end\");\n      svg.append('g').attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(yScale));\n      svg.append('path').datum(data).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2).attr('d', line);\n      svg.selectAll(\"circle\").data(data).join(\"circle\").attr(\"cx\", d => xScale(d.date)).attr(\"cy\", d => yScale(d.price)).attr(\"r\", 4).attr(\"fill\", \"steelblue\");\n    }\n  }, [historicalPrices]);\n\n  // Render grouped bar chart for historical and predicted average rent\n  useEffect(() => {\n    if (historicalPrices && predictedPrice) {\n      const width = 500;\n      const height = 300;\n      const margin = {\n        top: 20,\n        right: 30,\n        bottom: 50,\n        left: 60\n      };\n\n      // Calculate historical average rent\n      const historicalAverage = d3.mean(historicalPrices, d => d.price);\n      const data = [{\n        type: houseType,\n        category: 'Historical',\n        value: historicalAverage\n      }, {\n        type: houseType,\n        category: 'Predicted',\n        value: predictedPrice\n      }];\n      const x0 = d3.scaleBand().domain(data.map(d => d.type)).rangeRound([margin.left, width - margin.right]).paddingInner(0.1);\n      const x1 = d3.scaleBand().domain(['Historical', 'Predicted']).rangeRound([0, x0.bandwidth()]).padding(0.05);\n      const y = d3.scaleLinear().domain([0, d3.max(data, d => d.value)]).nice().rangeRound([height - margin.bottom, margin.top]);\n      const color = d3.scaleOrdinal().domain(['Historical', 'Predicted']).range(['#69b3a2', '#ff6f61']);\n      d3.select(barSvgRef.current).selectAll('*').remove();\n      const svg = d3.select(barSvgRef.current).attr('width', width).attr('height', height);\n      svg.append(\"g\").selectAll(\"g\").data(data).join(\"g\").attr(\"transform\", d => `translate(${x0(d.type)},0)`).selectAll(\"rect\").data(d => [d]).join(\"rect\").attr(\"x\", d => x1(d.category)).attr(\"y\", d => y(d.value)).attr(\"width\", x1.bandwidth()).attr(\"height\", d => y(0) - y(d.value)).attr(\"fill\", d => color(d.category));\n      svg.append(\"g\").attr(\"transform\", `translate(0,${height - margin.bottom})`).call(d3.axisBottom(x0));\n      svg.append(\"g\").attr(\"transform\", `translate(${margin.left},0)`).call(d3.axisLeft(y));\n\n      // Add legend\n      svg.selectAll(\".legend\").data(['Historical', 'Predicted']).enter().append(\"rect\").attr(\"x\", width - margin.right + 5).attr(\"y\", (d, i) => margin.top + i * 20).attr(\"width\", 10).attr(\"height\", 10).style(\"fill\", d => color(d));\n      svg.selectAll(\".legend-label\").data(['Historical', 'Predicted']).enter().append(\"text\").attr(\"x\", width - margin.right + 20).attr(\"y\", (d, i) => margin.top + i * 20 + 10).text(d => d).style(\"alignment-baseline\", \"middle\");\n    }\n  }, [historicalPrices, predictedPrice]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prediction-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Generated rent predictions for a \", numRooms, \" bedroom \", houseType, \" in \", normalizedSuburb, \" for the next \", rentalPeriod, \" months\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Average rent per week would be \", predictedPrice, \" AUD\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"historical-price-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Historical Rent Prices (last 6 months):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bar-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Comparison of Historical and Predicted Average Rent:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: barSvgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n};\n_s(GeneratedRentPrediction, \"djb5BL3h3C4dziu1JZle1WHHfJM=\", false, function () {\n  return [useLocation];\n});\n_c = GeneratedRentPrediction;\nexport default GeneratedRentPrediction;\nvar _c;\n$RefreshReg$(_c, \"GeneratedRentPrediction\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","d3","jsxDEV","_jsxDEV","GeneratedRentPrediction","_s","location","suburb","houseType","numRooms","rentalPeriod","predictedPrice","state","normalizedSuburb","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","historicalPrices","setHistoricalPrices","svgRef","barSvgRef","fetchHistoricalPrices","response","fetch","method","headers","body","JSON","stringify","monthsBack","ok","Error","data","json","historical_data","error","console","width","height","margin","top","right","bottom","left","parseDate","timeParse","d","date","price","filter","xScale","scaleTime","domain","extent","range","yScale","scaleLinear","max","nice","line","x","y","select","current","selectAll","remove","svg","attr","append","call","axisBottom","tickFormat","timeFormat","style","axisLeft","datum","historicalAverage","mean","type","category","value","x0","scaleBand","rangeRound","paddingInner","x1","bandwidth","padding","color","scaleOrdinal","enter","i","text","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/HousingProject/housingapp/src/GeneratedRentPredictions.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as d3 from 'd3';\r\nimport './Prediction.css';\r\n\r\nconst GeneratedRentPrediction = () => {\r\n    const location = useLocation();\r\n    const { suburb, houseType, numRooms, rentalPeriod, predictedPrice } = location.state || {};\r\n    const normalizedSuburb = suburb\r\n        .toLowerCase()\r\n        .split(' ')\r\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(' ');\r\n\r\n    const [historicalPrices, setHistoricalPrices] = useState(null);\r\n    const svgRef = useRef(); // Reference for D3 line chart\r\n    const barSvgRef = useRef(); // Reference for D3 bar chart\r\n\r\n    useEffect(() => {\r\n        const fetchHistoricalPrices = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:8000/getHistoricalRentPrices', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        suburb: suburb,\r\n                        numRooms: numRooms,\r\n                        houseType: houseType,\r\n                        monthsBack: 6,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed to fetch historical rent prices\");\r\n                }\r\n                const data = await response.json();\r\n                setHistoricalPrices(data.historical_data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching historical rent prices:\", error);\r\n            }\r\n        };\r\n\r\n        fetchHistoricalPrices();\r\n    }, [suburb, numRooms, houseType]);\r\n\r\n    // Render existing line chart (as provided in previous code)\r\n    useEffect(() => {\r\n        if (historicalPrices) {\r\n            const width = 600;\r\n            const height = 400;\r\n            const margin = { top: 20, right: 30, bottom: 70, left: 60 };\r\n\r\n            const parseDate = d3.timeParse('%m-%Y');\r\n            const data = historicalPrices\r\n                .map(d => ({\r\n                    date: parseDate(d.date),\r\n                    price: +d.price,\r\n                }))\r\n                .filter(d => d.date);\r\n\r\n            const xScale = d3.scaleTime()\r\n                .domain(d3.extent(data, d => d.date))\r\n                .range([margin.left, width - margin.right]);\r\n\r\n            const yScale = d3.scaleLinear()\r\n                .domain([0, d3.max(data, d => d.price)]).nice()\r\n                .range([height - margin.bottom, margin.top]);\r\n\r\n            const line = d3.line()\r\n                .x(d => xScale(d.date))\r\n                .y(d => yScale(d.price));\r\n\r\n            d3.select(svgRef.current).selectAll('*').remove();\r\n\r\n            const svg = d3.select(svgRef.current)\r\n                .attr('width', width)\r\n                .attr('height', height);\r\n\r\n            svg.append('g')\r\n                .attr('transform', `translate(0,${height - margin.bottom})`)\r\n                .call(d3.axisBottom(xScale).tickFormat(d3.timeFormat('%b %Y')))\r\n                .selectAll(\"text\")\r\n                .attr(\"transform\", \"rotate(-45)\")\r\n                .style(\"text-anchor\", \"end\");\r\n\r\n            svg.append('g')\r\n                .attr('transform', `translate(${margin.left},0)`)\r\n                .call(d3.axisLeft(yScale));\r\n\r\n            svg.append('path')\r\n                .datum(data)\r\n                .attr('fill', 'none')\r\n                .attr('stroke', 'steelblue')\r\n                .attr('stroke-width', 2)\r\n                .attr('d', line);\r\n            \r\n            svg.selectAll(\"circle\")\r\n                .data(data)\r\n                .join(\"circle\")\r\n                .attr(\"cx\", d => xScale(d.date))\r\n                .attr(\"cy\", d => yScale(d.price))\r\n                .attr(\"r\", 4)\r\n                .attr(\"fill\", \"steelblue\");\r\n        }\r\n    }, [historicalPrices]);\r\n\r\n    // Render grouped bar chart for historical and predicted average rent\r\n    useEffect(() => {\r\n        if (historicalPrices && predictedPrice) {\r\n            const width = 500;\r\n            const height = 300;\r\n            const margin = { top: 20, right: 30, bottom: 50, left: 60 };\r\n\r\n            // Calculate historical average rent\r\n            const historicalAverage = d3.mean(historicalPrices, d => d.price);\r\n\r\n            const data = [\r\n                { type: houseType, category: 'Historical', value: historicalAverage },\r\n                { type: houseType, category: 'Predicted', value: predictedPrice }\r\n            ];\r\n\r\n            const x0 = d3.scaleBand()\r\n                .domain(data.map(d => d.type))\r\n                .rangeRound([margin.left, width - margin.right])\r\n                .paddingInner(0.1);\r\n\r\n            const x1 = d3.scaleBand()\r\n                .domain(['Historical', 'Predicted'])\r\n                .rangeRound([0, x0.bandwidth()])\r\n                .padding(0.05);\r\n\r\n            const y = d3.scaleLinear()\r\n                .domain([0, d3.max(data, d => d.value)]).nice()\r\n                .rangeRound([height - margin.bottom, margin.top]);\r\n\r\n            const color = d3.scaleOrdinal()\r\n                .domain(['Historical', 'Predicted'])\r\n                .range(['#69b3a2', '#ff6f61']);\r\n\r\n            d3.select(barSvgRef.current).selectAll('*').remove();\r\n\r\n            const svg = d3.select(barSvgRef.current)\r\n                .attr('width', width)\r\n                .attr('height', height);\r\n\r\n            svg.append(\"g\")\r\n                .selectAll(\"g\")\r\n                .data(data)\r\n                .join(\"g\")\r\n                .attr(\"transform\", d => `translate(${x0(d.type)},0)`)\r\n                .selectAll(\"rect\")\r\n                .data(d => [d])\r\n                .join(\"rect\")\r\n                .attr(\"x\", d => x1(d.category))\r\n                .attr(\"y\", d => y(d.value))\r\n                .attr(\"width\", x1.bandwidth())\r\n                .attr(\"height\", d => y(0) - y(d.value))\r\n                .attr(\"fill\", d => color(d.category));\r\n\r\n            svg.append(\"g\")\r\n                .attr(\"transform\", `translate(0,${height - margin.bottom})`)\r\n                .call(d3.axisBottom(x0));\r\n\r\n            svg.append(\"g\")\r\n                .attr(\"transform\", `translate(${margin.left},0)`)\r\n                .call(d3.axisLeft(y));\r\n            \r\n            // Add legend\r\n            svg.selectAll(\".legend\")\r\n                .data(['Historical', 'Predicted'])\r\n                .enter()\r\n                .append(\"rect\")\r\n                .attr(\"x\", width - margin.right + 5)\r\n                .attr(\"y\", (d, i) => margin.top + i * 20)\r\n                .attr(\"width\", 10)\r\n                .attr(\"height\", 10)\r\n                .style(\"fill\", d => color(d));\r\n\r\n            svg.selectAll(\".legend-label\")\r\n                .data(['Historical', 'Predicted'])\r\n                .enter()\r\n                .append(\"text\")\r\n                .attr(\"x\", width - margin.right + 20)\r\n                .attr(\"y\", (d, i) => margin.top + i * 20 + 10)\r\n                .text(d => d)\r\n                .style(\"alignment-baseline\", \"middle\");\r\n        }\r\n    }, [historicalPrices, predictedPrice]);\r\n\r\n    return (\r\n        <div className='prediction-container'>\r\n            <h2>\r\n                Generated rent predictions for a {numRooms} bedroom {houseType} in {normalizedSuburb} for the next {rentalPeriod} months\r\n            </h2>\r\n            <h3>Average rent per week would be {predictedPrice} AUD</h3>\r\n            <div className='historical-price-chart'>\r\n                <h4>Historical Rent Prices (last 6 months):</h4>\r\n                <svg ref={svgRef}></svg>\r\n            </div>\r\n            <div className='bar-chart'>\r\n                <h4>Comparison of Historical and Predicted Average Rent:</h4>\r\n                <svg ref={barSvgRef}></svg>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneratedRentPrediction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}