{"ast":null,"code":"var _jsxFileName = \"C:\\\\HousingProject\\\\housingapp\\\\src\\\\GeneratedRentPredictions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport * as d3 from 'd3';\nimport './Prediction.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratedRentPrediction = () => {\n  _s();\n  const location = useLocation();\n  const {\n    suburb,\n    houseType,\n    numRooms,\n    rentalPeriod,\n    predictedPrice\n  } = location.state || {};\n  const normalizedSuburb = suburb.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  const [historicalPrices, setHistoricalPrices] = useState(null);\n  const [rentComparisons, setRentComparisons] = useState(null);\n  const svgRef = useRef(); // Reference for historical chart\n  const comparisonSvgRef = useRef(); // Reference for rent comparison chart\n\n  useEffect(() => {\n    const fetchHistoricalPrices = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/get_historical_rent_prices', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            suburb: suburb,\n            numRooms: numRooms,\n            houseType: houseType,\n            monthsBack: 6\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch historical rent prices\");\n        }\n        const data = await response.json();\n        setHistoricalPrices(data.historical_data);\n      } catch (error) {\n        console.error(\"Error fetching historical rent prices:\", error);\n      }\n    };\n    const fetchRentComparisson = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/get_rent_comparisson', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            suburb: suburb,\n            numRooms: numRooms,\n            houseType: houseType,\n            monthsAhead: rentalPeriod\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch rent comparison data\");\n        }\n        const data = await response.json();\n        setRentComparisons(data.predictions);\n      } catch (error) {\n        console.error(\"Error fetching rent comparison data:\", error);\n      }\n    };\n    fetchHistoricalPrices();\n    fetchRentComparisson();\n  }, [suburb, numRooms, houseType, rentalPeriod]);\n\n  // Set up D3 stacked bar chart for rent comparison data\n  useEffect(() => {\n    if (rentComparisons) {\n      const width = 800;\n      const height = 500;\n      const margin = {\n        top: 20,\n        right: 30,\n        bottom: 100,\n        left: 80\n      };\n\n      // Process and stack the data\n      const stackedData = d3.rollup(rentComparisons, v => {\n        var _v$find, _v$find2;\n        return {\n          House: ((_v$find = v.find(d => d.housing_type === 'House')) === null || _v$find === void 0 ? void 0 : _v$find.price) || 0,\n          Flat: ((_v$find2 = v.find(d => d.housing_type === 'Flat')) === null || _v$find2 === void 0 ? void 0 : _v$find2.price) || 0\n        };\n      }, d => d.suburb);\n      const suburbs = Array.from(stackedData.keys());\n      const series = d3.stack().keys([\"House\", \"Flat\"])(Array.from(stackedData.values()));\n      const xScale = d3.scaleBand().domain(suburbs).range([margin.left, width - margin.right]).padding(0.2);\n      const yScale = d3.scaleLinear().domain([0, d3.max(series[series.length - 1], d => d[1])]).nice().range([height - margin.bottom, margin.top]);\n      const colorScale = d3.scaleOrdinal().domain([\"House\", \"Flat\"]).range([\"#1f77b4\", \"#ff7f0e\"]);\n      d3.select(comparisonSvgRef.current).selectAll('*').remove();\n      const svg = d3.select(comparisonSvgRef.current).attr('width', width).attr('height', height);\n\n      // Add X axis\n      svg.append('g').attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(xScale)).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").style(\"text-anchor\", \"end\");\n\n      // Add Y axis\n      svg.append('g').attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(yScale)).append(\"text\").attr(\"fill\", \"black\").attr(\"x\", -margin.left).attr(\"y\", margin.top - 10).attr(\"text-anchor\", \"start\").text(\"Price per week (AUD)\");\n\n      // Add stacked bars\n      svg.append(\"g\").selectAll(\"g\").data(series).join(\"g\").attr(\"fill\", d => colorScale(d.key)).selectAll(\"rect\").data(d => d).join(\"rect\").attr(\"x\", d => xScale(d.data[0])).attr(\"y\", d => yScale(d[1])).attr(\"height\", d => yScale(d[0]) - yScale(d[1])).attr(\"width\", xScale.bandwidth());\n\n      // Add labels for each segment\n      svg.append(\"g\").selectAll(\"g\").data(series).join(\"g\").attr(\"fill\", \"black\").attr(\"font-size\", \"10px\").attr(\"text-anchor\", \"middle\").selectAll(\"text\").data(d => d).join(\"text\").attr(\"x\", d => xScale(d.data[0]) + xScale.bandwidth() / 2).attr(\"y\", d => yScale(d[1]) + (yScale(d[0]) - yScale(d[1])) / 2).text(d => d3.format(\".2f\")(d[1] - d[0]));\n\n      // Add legend\n      const legend = svg.append(\"g\").attr(\"transform\", `translate(${width - margin.right - 120}, ${margin.top})`);\n      legend.selectAll(\"rect\").data([\"House\", \"Flat\"]).join(\"rect\").attr(\"x\", 0).attr(\"y\", (d, i) => i * 20).attr(\"width\", 15).attr(\"height\", 15).attr(\"fill\", d => colorScale(d));\n      legend.selectAll(\"text\").data([\"House\", \"Flat\"]).join(\"text\").attr(\"x\", 20).attr(\"y\", (d, i) => i * 20 + 12).text(d => d);\n    }\n  }, [rentComparisons]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prediction-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Generated rent predictions for a \", numRooms, \" bedroom \", houseType, \" in \", normalizedSuburb, \" for the next \", rentalPeriod, \" months\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Average rent per week would be \", predictedPrice, \" AUD\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"historical-price-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Historical Rent Prices (last 6 months):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rent-comparison-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Rent Comparisons in Nearby Suburbs (Stacked):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: comparisonSvgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n};\n_s(GeneratedRentPrediction, \"+anUQzmbsUBQqdmrfUc9pkU3kEA=\", false, function () {\n  return [useLocation];\n});\n_c = GeneratedRentPrediction;\nexport default GeneratedRentPrediction;\nvar _c;\n$RefreshReg$(_c, \"GeneratedRentPrediction\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","d3","jsxDEV","_jsxDEV","GeneratedRentPrediction","_s","location","suburb","houseType","numRooms","rentalPeriod","predictedPrice","state","normalizedSuburb","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","historicalPrices","setHistoricalPrices","rentComparisons","setRentComparisons","svgRef","comparisonSvgRef","fetchHistoricalPrices","response","fetch","method","headers","body","JSON","stringify","monthsBack","ok","Error","data","json","historical_data","error","console","fetchRentComparisson","monthsAhead","predictions","width","height","margin","top","right","bottom","left","stackedData","rollup","v","_v$find","_v$find2","House","find","d","housing_type","price","Flat","suburbs","Array","from","keys","series","stack","values","xScale","scaleBand","domain","range","padding","yScale","scaleLinear","max","length","nice","colorScale","scaleOrdinal","select","current","selectAll","remove","svg","attr","append","call","axisBottom","style","axisLeft","text","key","bandwidth","format","legend","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/HousingProject/housingapp/src/GeneratedRentPredictions.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as d3 from 'd3';\r\nimport './Prediction.css';\r\n\r\nconst GeneratedRentPrediction = () => {\r\n    const location = useLocation();\r\n    const { suburb, houseType, numRooms, rentalPeriod, predictedPrice } = location.state || {};\r\n    const normalizedSuburb = suburb\r\n        .toLowerCase()\r\n        .split(' ')\r\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(' ');\r\n\r\n    const [historicalPrices, setHistoricalPrices] = useState(null);\r\n    const [rentComparisons, setRentComparisons] = useState(null);\r\n    const svgRef = useRef(); // Reference for historical chart\r\n    const comparisonSvgRef = useRef(); // Reference for rent comparison chart\r\n\r\n    useEffect(() => {\r\n        const fetchHistoricalPrices = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:8000/get_historical_rent_prices', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        suburb: suburb,\r\n                        numRooms: numRooms,\r\n                        houseType: houseType,\r\n                        monthsBack: 6,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed to fetch historical rent prices\");\r\n                }\r\n                const data = await response.json();\r\n                setHistoricalPrices(data.historical_data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching historical rent prices:\", error);\r\n            }\r\n        };\r\n\r\n        const fetchRentComparisson = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:8000/get_rent_comparisson', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        suburb: suburb,\r\n                        numRooms: numRooms,\r\n                        houseType: houseType,\r\n                        monthsAhead: rentalPeriod,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed to fetch rent comparison data\");\r\n                }\r\n                const data = await response.json();\r\n                setRentComparisons(data.predictions);\r\n            } catch (error) {\r\n                console.error(\"Error fetching rent comparison data:\", error);\r\n            }\r\n        };\r\n\r\n        fetchHistoricalPrices();\r\n        fetchRentComparisson();\r\n    }, [suburb, numRooms, houseType, rentalPeriod]);\r\n\r\n    // Set up D3 stacked bar chart for rent comparison data\r\n    useEffect(() => {\r\n        if (rentComparisons) {\r\n            const width = 800;\r\n            const height = 500;\r\n            const margin = { top: 20, right: 30, bottom: 100, left: 80 };\r\n\r\n            // Process and stack the data\r\n            const stackedData = d3.rollup(\r\n                rentComparisons,\r\n                v => ({\r\n                    House: v.find(d => d.housing_type === 'House')?.price || 0,\r\n                    Flat: v.find(d => d.housing_type === 'Flat')?.price || 0\r\n                }),\r\n                d => d.suburb\r\n            );\r\n            const suburbs = Array.from(stackedData.keys());\r\n            const series = d3.stack().keys([\"House\", \"Flat\"])(Array.from(stackedData.values()));\r\n\r\n            const xScale = d3.scaleBand()\r\n                .domain(suburbs)\r\n                .range([margin.left, width - margin.right])\r\n                .padding(0.2);\r\n\r\n            const yScale = d3.scaleLinear()\r\n                .domain([0, d3.max(series[series.length - 1], d => d[1])]).nice()\r\n                .range([height - margin.bottom, margin.top]);\r\n\r\n            const colorScale = d3.scaleOrdinal()\r\n                .domain([\"House\", \"Flat\"])\r\n                .range([\"#1f77b4\", \"#ff7f0e\"]);\r\n\r\n            d3.select(comparisonSvgRef.current).selectAll('*').remove();\r\n\r\n            const svg = d3.select(comparisonSvgRef.current)\r\n                .attr('width', width)\r\n                .attr('height', height);\r\n\r\n            // Add X axis\r\n            svg.append('g')\r\n                .attr('transform', `translate(0,${height - margin.bottom})`)\r\n                .call(d3.axisBottom(xScale))\r\n                .selectAll(\"text\")\r\n                .attr(\"transform\", \"rotate(-45)\")\r\n                .style(\"text-anchor\", \"end\");\r\n\r\n            // Add Y axis\r\n            svg.append('g')\r\n                .attr('transform', `translate(${margin.left},0)`)\r\n                .call(d3.axisLeft(yScale))\r\n                .append(\"text\")\r\n                .attr(\"fill\", \"black\")\r\n                .attr(\"x\", -margin.left)\r\n                .attr(\"y\", margin.top - 10)\r\n                .attr(\"text-anchor\", \"start\")\r\n                .text(\"Price per week (AUD)\");\r\n\r\n            // Add stacked bars\r\n            svg.append(\"g\")\r\n                .selectAll(\"g\")\r\n                .data(series)\r\n                .join(\"g\")\r\n                .attr(\"fill\", d => colorScale(d.key))\r\n                .selectAll(\"rect\")\r\n                .data(d => d)\r\n                .join(\"rect\")\r\n                .attr(\"x\", d => xScale(d.data[0]))\r\n                .attr(\"y\", d => yScale(d[1]))\r\n                .attr(\"height\", d => yScale(d[0]) - yScale(d[1]))\r\n                .attr(\"width\", xScale.bandwidth());\r\n\r\n            // Add labels for each segment\r\n            svg.append(\"g\")\r\n                .selectAll(\"g\")\r\n                .data(series)\r\n                .join(\"g\")\r\n                .attr(\"fill\", \"black\")\r\n                .attr(\"font-size\", \"10px\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .selectAll(\"text\")\r\n                .data(d => d)\r\n                .join(\"text\")\r\n                .attr(\"x\", d => xScale(d.data[0]) + xScale.bandwidth() / 2)\r\n                .attr(\"y\", d => yScale(d[1]) + (yScale(d[0]) - yScale(d[1])) / 2)\r\n                .text(d => d3.format(\".2f\")(d[1] - d[0]));\r\n\r\n            // Add legend\r\n            const legend = svg.append(\"g\")\r\n                .attr(\"transform\", `translate(${width - margin.right - 120}, ${margin.top})`);\r\n\r\n            legend.selectAll(\"rect\")\r\n                .data([\"House\", \"Flat\"])\r\n                .join(\"rect\")\r\n                .attr(\"x\", 0)\r\n                .attr(\"y\", (d, i) => i * 20)\r\n                .attr(\"width\", 15)\r\n                .attr(\"height\", 15)\r\n                .attr(\"fill\", d => colorScale(d));\r\n\r\n            legend.selectAll(\"text\")\r\n                .data([\"House\", \"Flat\"])\r\n                .join(\"text\")\r\n                .attr(\"x\", 20)\r\n                .attr(\"y\", (d, i) => i * 20 + 12)\r\n                .text(d => d);\r\n        }\r\n    }, [rentComparisons]);\r\n\r\n    return (\r\n        <div className='prediction-container'>\r\n            <h2>\r\n                Generated rent predictions for a {numRooms} bedroom {houseType} in {normalizedSuburb} for the next {rentalPeriod} months\r\n            </h2>\r\n            <h3>Average rent per week would be {predictedPrice} AUD</h3>\r\n            <div className='historical-price-chart'>\r\n                <h4>Historical Rent Prices (last 6 months):</h4>\r\n                <svg ref={svgRef}></svg>\r\n            </div>\r\n            <div className='rent-comparison-chart'>\r\n                <h4>Rent Comparisons in Nearby Suburbs (Stacked):</h4>\r\n                <svg ref={comparisonSvgRef}></svg>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneratedRentPrediction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}