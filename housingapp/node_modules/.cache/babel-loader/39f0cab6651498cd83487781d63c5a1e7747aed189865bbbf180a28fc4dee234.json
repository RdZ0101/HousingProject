{"ast":null,"code":"var _jsxFileName = \"C:\\\\HousingProject\\\\housingapp\\\\src\\\\GeneratedRentPredictions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Prediction.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratedRentPrediction = () => {\n  _s();\n  const location = useLocation();\n  const {\n    suburb,\n    houseType,\n    numRooms,\n    rentalPeriod,\n    predictedPrice\n  } = location.state || {};\n  const normalizedSuburb = suburb.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  const [historicalPrices, setHistoricalPrices] = useState(null);\n  useEffect(() => {\n    const fetchHistoricalPrices = async () => {\n      try {\n        const response = await fetch('/getHistoricalRentPrices', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            suburb: suburb,\n            numRooms: numRooms,\n            houseType: houseType,\n            monthsBack: 6\n          })\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch historical rent prices\");\n        }\n        const data = await response.json();\n        setHistoricalPrices(data.historical_data);\n      } catch (error) {\n        console.error(\"Error fetching historical rent prices:\", error);\n      }\n    };\n    fetchHistoricalPrices();\n  }, [suburb, numRooms, houseType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prediction-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Generated rent predictions for a \", numRooms, \" bedroom \", houseType, \" in \", normalizedSuburb, \" for the next \", rentalPeriod, \" months\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Average rent per week would be \", predictedPrice, \" AUD\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), historicalPrices ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Historical Rent Prices (last 6 months):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: historicalPrices.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Date: \", entry.date, \", Price: \", entry.price, \" AUD\"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading historical prices...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(GeneratedRentPrediction, \"YNYi53WGmej/vMQINzX0JkzRIhw=\", false, function () {\n  return [useLocation];\n});\n_c = GeneratedRentPrediction;\nexport default GeneratedRentPrediction;\nvar _c;\n$RefreshReg$(_c, \"GeneratedRentPrediction\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","jsxDEV","_jsxDEV","GeneratedRentPrediction","_s","location","suburb","houseType","numRooms","rentalPeriod","predictedPrice","state","normalizedSuburb","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","historicalPrices","setHistoricalPrices","fetchHistoricalPrices","response","fetch","method","headers","body","JSON","stringify","monthsBack","ok","Error","data","json","historical_data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entry","index","date","price","_c","$RefreshReg$"],"sources":["C:/HousingProject/housingapp/src/GeneratedRentPredictions.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './Prediction.css';\r\n\r\nconst GeneratedRentPrediction = () => {\r\n    const location = useLocation();\r\n    const { suburb, houseType, numRooms, rentalPeriod, predictedPrice } = location.state || {};\r\n    const normalizedSuburb = suburb\r\n        .toLowerCase()\r\n        .split(' ')\r\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(' ');\r\n\r\n    const [historicalPrices, setHistoricalPrices] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchHistoricalPrices = async () => {\r\n            try {\r\n                const response = await fetch('/getHistoricalRentPrices', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({\r\n                        suburb: suburb,\r\n                        numRooms: numRooms,\r\n                        houseType: houseType,\r\n                        monthsBack: 6,\r\n                    }),\r\n                });\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed to fetch historical rent prices\");\r\n                }\r\n                const data = await response.json();\r\n                setHistoricalPrices(data.historical_data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching historical rent prices:\", error);\r\n            }\r\n        };\r\n\r\n        fetchHistoricalPrices();\r\n    }, [suburb, numRooms, houseType]);\r\n\r\n    return (\r\n        <div className='prediction-container'>\r\n            <h2>\r\n                Generated rent predictions for a {numRooms} bedroom {houseType} in {normalizedSuburb} for the next {rentalPeriod} months\r\n            </h2>\r\n            <h3>Average rent per week would be {predictedPrice} AUD</h3>\r\n            {historicalPrices ? (\r\n                <div>\r\n                    <h4>Historical Rent Prices (last 6 months):</h4>\r\n                    <ul>\r\n                        {historicalPrices.map((entry, index) => (\r\n                            <li key={index}>\r\n                                Date: {entry.date}, Price: {entry.price} AUD\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            ) : (\r\n                <p>Loading historical prices...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneratedRentPrediction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}