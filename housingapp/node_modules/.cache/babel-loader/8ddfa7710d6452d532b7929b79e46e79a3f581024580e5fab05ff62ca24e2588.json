{"ast":null,"code":"var _jsxFileName = \"C:\\\\HousingProject\\\\housingapp\\\\src\\\\GeneratedRentPredictions.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport * as d3 from 'd3';\nimport './RentPred.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GeneratedRentPrediction = () => {\n  _s();\n  const location = useLocation();\n  const {\n    suburb,\n    houseType,\n    numRooms,\n    rentalPeriod,\n    predictedPrice\n  } = location.state || {};\n  const normalizedSuburb = suburb.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  const [historicalPrices, setHistoricalPrices] = useState(null);\n  const [rentComparisons, setRentComparisons] = useState(null);\n  const [loading, setLoading] = useState(true); // Track loading state\n  const svgRef = useRef();\n  const comparisonSvgRef = useRef();\n  useEffect(() => {\n    const fetchHistoricalPrices = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/get_historical_rent_prices', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            suburb,\n            numRooms,\n            houseType,\n            monthsBack: 6\n          })\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch historical rent prices\");\n        const data = await response.json();\n        setHistoricalPrices(data.historical_data);\n      } catch (error) {\n        console.error(\"Error fetching historical rent prices:\", error);\n      }\n    };\n    const fetchRentComparisson = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/get_rent_comparisson', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            suburb,\n            numRooms,\n            houseType,\n            monthsAhead: rentalPeriod\n          })\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch rent comparison data\");\n        const data = await response.json();\n        setRentComparisons(data.predictions);\n      } catch (error) {\n        console.error(\"Error fetching rent comparison data:\", error);\n      }\n    };\n\n    // Fetch both datasets, then stop showing loading spinner\n    Promise.all([fetchHistoricalPrices(), fetchRentComparisson()]).then(() => setLoading(false));\n  }, [suburb, numRooms, houseType, rentalPeriod]);\n\n  // Tooltip div setup\n  const tooltip = d3.select(\".prediction-container\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0).style(\"position\", \"absolute\").style(\"background-color\", \"#fff\").style(\"border\", \"1px solid #d3d3d3\").style(\"padding\", \"5px\").style(\"border-radius\", \"5px\").style(\"pointer-events\", \"none\");\n\n  // Set up D3 chart for historical prices after data is fetched\n  useEffect(() => {\n    if (historicalPrices) {\n      const width = 600;\n      const height = 400;\n      const margin = {\n        top: 20,\n        right: 30,\n        bottom: 70,\n        left: 60\n      };\n      const parseDate = d3.timeParse('%m-%Y');\n      const data = historicalPrices.map(d => ({\n        date: parseDate(d.date),\n        price: +d.price\n      })).filter(d => d.date);\n      const xScale = d3.scaleTime().domain(d3.extent(data, d => d.date)).range([margin.left, width - margin.right]);\n      const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d.price)]).nice().range([height - margin.bottom, margin.top]);\n      const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.price));\n      d3.select(svgRef.current).selectAll('*').remove();\n      const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n\n      // Add X and Y axes and labels\n      svg.append('g').attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(xScale)).selectAll(\"text\").attr(\"transform\", \"rotate(-45)\").attr(\"y\", 10).style(\"text-anchor\", \"end\");\n      svg.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"x\", width / 2).attr(\"y\", height - margin.bottom + 50).text(\"Date\");\n      svg.append('g').attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(yScale));\n      svg.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"transform\", `rotate(-90)`).attr(\"x\", -height / 2).attr(\"y\", margin.left - 40).text(\"Price per week (AUD)\");\n      svg.append('path').datum(data).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2).attr('d', line);\n\n      // Add points and hover interactions\n      svg.selectAll(\"circle\").data(data).join(\"circle\").attr(\"cx\", d => xScale(d.date)).attr(\"cy\", d => yScale(d.price)).attr(\"r\", 4).attr(\"fill\", \"steelblue\").on(\"mouseover\", (event, d) => {\n        tooltip.transition().duration(200).style(\"opacity\", 0.9);\n        tooltip.html(`Price: AUD ${d.price.toFixed(2)}`).style(\"left\", event.pageX + 10 + \"px\").style(\"top\", event.pageY - 20 + \"px\");\n      }).on(\"mouseout\", () => {\n        tooltip.transition().duration(500).style(\"opacity\", 0);\n      }).on(\"mousemove\", event => {\n        tooltip.style(\"left\", event.pageX + 10 + \"px\").style(\"top\", event.pageY - 20 + \"px\");\n      });\n    }\n  }, [historicalPrices]);\n\n  // Set up D3 chart for rent comparison data\n  useEffect(() => {\n    if (rentComparisons) {\n      const width = 600;\n      const height = 400;\n      const margin = {\n        top: 20,\n        right: 150,\n        bottom: 100,\n        left: 60\n      };\n      const groupedData = d3.groups(rentComparisons, d => d.suburb);\n      const xScale = d3.scaleBand().domain(groupedData.map(d => d[0])).range([margin.left, width - margin.right]).padding(0.2);\n      const yScale = d3.scaleLinear().domain([0, d3.max(rentComparisons, d => d.price)]).nice().range([height - margin.bottom, margin.top]);\n      const colorScale = d3.scaleOrdinal().domain([\"Flat\", \"House\"]).range([\"#1f77b4\", \"#ff7f0e\"]);\n      d3.select(comparisonSvgRef.current).selectAll('*').remove();\n      const svg = d3.select(comparisonSvgRef.current).attr('width', width).attr('height', height);\n      svg.append('g').attr('transform', `translate(0,${height - margin.bottom})`).call(d3.axisBottom(xScale)).selectAll(\"text\").attr(\"y\", 10).attr(\"dx\", xScale.bandwidth() / 4).style(\"text-anchor\", \"middle\");\n      svg.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"x\", width / 2).attr(\"y\", height - margin.bottom + 70).text(\"Suburb\");\n      svg.append('g').attr('transform', `translate(${margin.left},0)`).call(d3.axisLeft(yScale));\n      svg.append(\"text\").attr(\"text-anchor\", \"middle\").attr(\"transform\", `rotate(-90)`).attr(\"x\", -height / 2).attr(\"y\", margin.left - 40).text(\"Price per week (AUD)\");\n\n      // Draw columns for each suburb and house type\n      svg.selectAll(\".bar-group\").data(groupedData).join(\"g\").attr(\"class\", \"bar-group\").attr(\"transform\", d => `translate(${xScale(d[0])},0)`).selectAll(\"rect\").data(d => d[1]).join(\"rect\").attr(\"class\", \"bar\").attr(\"x\", d => xScale.bandwidth() / 2 * (d.housing_type === \"Flat\" ? -1 : 1)).attr(\"y\", d => yScale(d.price)).attr(\"width\", xScale.bandwidth() / 2).attr(\"height\", d => height - margin.bottom - yScale(d.price)).attr(\"fill\", d => colorScale(d.housing_type)).on(\"mouseover\", (event, d) => {\n        tooltip.transition().duration(200).style(\"opacity\", 0.9);\n        tooltip.html(`Type: ${d.housing_type}<br>Price: AUD ${d.price.toFixed(2)}`).style(\"left\", event.pageX + 10 + \"px\").style(\"top\", event.pageY - 20 + \"px\");\n      }).on(\"mouseout\", () => {\n        tooltip.transition().duration(500).style(\"opacity\", 0);\n      }).on(\"mousemove\", event => {\n        tooltip.style(\"left\", event.pageX + 10 + \"px\").style(\"top\", event.pageY - 20 + \"px\");\n      });\n\n      // Add legend for housing types\n      const legend = svg.append(\"g\").attr(\"transform\", `translate(${width - margin.right + 30}, ${margin.top})`);\n      legend.selectAll(\"rect\").data([\"Flat\", \"House\"]).join(\"rect\").attr(\"x\", 0).attr(\"y\", (d, i) => i * 20).attr(\"width\", 15).attr(\"height\", 15).attr(\"fill\", d => colorScale(d));\n      legend.selectAll(\"text\").data([\"Flat\", \"House\"]).join(\"text\").attr(\"x\", 20).attr(\"y\", (d, i) => i * 20 + 12).text(d => d);\n    }\n  }, [rentComparisons]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prediction-container\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-spinner\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Generated rent predictions for a \", numRooms, \" bedroom \", houseType, \" in \", normalizedSuburb, \" for the next \", rentalPeriod, \" months\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Average rent per week would be \", predictedPrice, \" AUD\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Historical Rent Prices (last 6 months):\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n            ref: svgRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Rent Comparisons in Nearby Suburbs:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n            ref: comparisonSvgRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 9\n  }, this);\n};\n_s(GeneratedRentPrediction, \"viN+km8FohthO6zYO/ioX0N/y4Q=\", false, function () {\n  return [useLocation];\n});\n_c = GeneratedRentPrediction;\nexport default GeneratedRentPrediction;\nvar _c;\n$RefreshReg$(_c, \"GeneratedRentPrediction\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useLocation","d3","jsxDEV","_jsxDEV","Fragment","_Fragment","GeneratedRentPrediction","_s","location","suburb","houseType","numRooms","rentalPeriod","predictedPrice","state","normalizedSuburb","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","historicalPrices","setHistoricalPrices","rentComparisons","setRentComparisons","loading","setLoading","svgRef","comparisonSvgRef","fetchHistoricalPrices","response","fetch","method","headers","body","JSON","stringify","monthsBack","ok","Error","data","json","historical_data","error","console","fetchRentComparisson","monthsAhead","predictions","Promise","all","then","tooltip","select","append","attr","style","width","height","margin","top","right","bottom","left","parseDate","timeParse","d","date","price","filter","xScale","scaleTime","domain","extent","range","yScale","scaleLinear","max","nice","line","x","y","current","selectAll","remove","svg","call","axisBottom","text","axisLeft","datum","on","event","transition","duration","html","toFixed","pageX","pageY","groupedData","groups","scaleBand","padding","colorScale","scaleOrdinal","bandwidth","housing_type","legend","i","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/HousingProject/housingapp/src/GeneratedRentPredictions.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport * as d3 from 'd3';\r\nimport './RentPred.css';\r\n\r\nconst GeneratedRentPrediction = () => {\r\n    const location = useLocation();\r\n    const { suburb, houseType, numRooms, rentalPeriod, predictedPrice } = location.state || {};\r\n    const normalizedSuburb = suburb\r\n        .toLowerCase()\r\n        .split(' ')\r\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(' ');\r\n\r\n    const [historicalPrices, setHistoricalPrices] = useState(null);\r\n    const [rentComparisons, setRentComparisons] = useState(null);\r\n    const [loading, setLoading] = useState(true); // Track loading state\r\n    const svgRef = useRef();\r\n    const comparisonSvgRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const fetchHistoricalPrices = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:8000/get_historical_rent_prices', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ suburb, numRooms, houseType, monthsBack: 6 }),\r\n                });\r\n                if (!response.ok) throw new Error(\"Failed to fetch historical rent prices\");\r\n                const data = await response.json();\r\n                setHistoricalPrices(data.historical_data);\r\n            } catch (error) {\r\n                console.error(\"Error fetching historical rent prices:\", error);\r\n            }\r\n        };\r\n\r\n        const fetchRentComparisson = async () => {\r\n            try {\r\n                const response = await fetch('http://localhost:8000/get_rent_comparisson', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ suburb, numRooms, houseType, monthsAhead: rentalPeriod }),\r\n                });\r\n                if (!response.ok) throw new Error(\"Failed to fetch rent comparison data\");\r\n                const data = await response.json();\r\n                setRentComparisons(data.predictions);\r\n            } catch (error) {\r\n                console.error(\"Error fetching rent comparison data:\", error);\r\n            }\r\n        };\r\n\r\n        // Fetch both datasets, then stop showing loading spinner\r\n        Promise.all([fetchHistoricalPrices(), fetchRentComparisson()]).then(() => setLoading(false));\r\n    }, [suburb, numRooms, houseType, rentalPeriod]);\r\n\r\n    // Tooltip div setup\r\n    const tooltip = d3.select(\".prediction-container\")\r\n        .append(\"div\")\r\n        .attr(\"class\", \"tooltip\")\r\n        .style(\"opacity\", 0)\r\n        .style(\"position\", \"absolute\")\r\n        .style(\"background-color\", \"#fff\")\r\n        .style(\"border\", \"1px solid #d3d3d3\")\r\n        .style(\"padding\", \"5px\")\r\n        .style(\"border-radius\", \"5px\")\r\n        .style(\"pointer-events\", \"none\");\r\n\r\n    // Set up D3 chart for historical prices after data is fetched\r\n    useEffect(() => {\r\n        if (historicalPrices) {\r\n            const width = 600;\r\n            const height = 400;\r\n            const margin = { top: 20, right: 30, bottom: 70, left: 60 };\r\n\r\n            const parseDate = d3.timeParse('%m-%Y');\r\n            const data = historicalPrices\r\n                .map(d => ({\r\n                    date: parseDate(d.date),\r\n                    price: +d.price,\r\n                }))\r\n                .filter(d => d.date);\r\n\r\n            const xScale = d3.scaleTime()\r\n                .domain(d3.extent(data, d => d.date))\r\n                .range([margin.left, width - margin.right]);\r\n\r\n            const yScale = d3.scaleLinear()\r\n                .domain([0, d3.max(data, d => d.price)]).nice()\r\n                .range([height - margin.bottom, margin.top]);\r\n\r\n            const line = d3.line()\r\n                .x(d => xScale(d.date))\r\n                .y(d => yScale(d.price));\r\n\r\n            d3.select(svgRef.current).selectAll('*').remove();\r\n\r\n            const svg = d3.select(svgRef.current)\r\n                .attr('width', width)\r\n                .attr('height', height);\r\n\r\n            // Add X and Y axes and labels\r\n            svg.append('g')\r\n                .attr('transform', `translate(0,${height - margin.bottom})`)\r\n                .call(d3.axisBottom(xScale))\r\n                .selectAll(\"text\")\r\n                .attr(\"transform\", \"rotate(-45)\")\r\n                .attr(\"y\", 10)\r\n                .style(\"text-anchor\", \"end\");\r\n\r\n            svg.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"x\", width / 2)\r\n                .attr(\"y\", height - margin.bottom + 50)\r\n                .text(\"Date\");\r\n\r\n            svg.append('g')\r\n                .attr('transform', `translate(${margin.left},0)`)\r\n                .call(d3.axisLeft(yScale));\r\n\r\n            svg.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"transform\", `rotate(-90)`)\r\n                .attr(\"x\", -height / 2)\r\n                .attr(\"y\", margin.left - 40)\r\n                .text(\"Price per week (AUD)\");\r\n\r\n            svg.append('path')\r\n                .datum(data)\r\n                .attr('fill', 'none')\r\n                .attr('stroke', 'steelblue')\r\n                .attr('stroke-width', 2)\r\n                .attr('d', line);\r\n\r\n            // Add points and hover interactions\r\n            svg.selectAll(\"circle\")\r\n                .data(data)\r\n                .join(\"circle\")\r\n                .attr(\"cx\", d => xScale(d.date))\r\n                .attr(\"cy\", d => yScale(d.price))\r\n                .attr(\"r\", 4)\r\n                .attr(\"fill\", \"steelblue\")\r\n                .on(\"mouseover\", (event, d) => {\r\n                    tooltip.transition().duration(200).style(\"opacity\", 0.9);\r\n                    tooltip.html(`Price: AUD ${d.price.toFixed(2)}`)\r\n                        .style(\"left\", (event.pageX + 10) + \"px\")\r\n                        .style(\"top\", (event.pageY - 20) + \"px\");\r\n                })\r\n                .on(\"mouseout\", () => {\r\n                    tooltip.transition().duration(500).style(\"opacity\", 0);\r\n                })\r\n                .on(\"mousemove\", (event) => {\r\n                    tooltip.style(\"left\", (event.pageX + 10) + \"px\")\r\n                        .style(\"top\", (event.pageY - 20) + \"px\");\r\n                });\r\n        }\r\n    }, [historicalPrices]);\r\n\r\n    // Set up D3 chart for rent comparison data\r\n    useEffect(() => {\r\n        if (rentComparisons) {\r\n            const width = 600;\r\n            const height = 400;\r\n            const margin = { top: 20, right: 150, bottom: 100, left: 60 };\r\n\r\n            const groupedData = d3.groups(rentComparisons, d => d.suburb);\r\n\r\n            const xScale = d3.scaleBand()\r\n                .domain(groupedData.map(d => d[0]))\r\n                .range([margin.left, width - margin.right])\r\n                .padding(0.2);\r\n\r\n            const yScale = d3.scaleLinear()\r\n                .domain([0, d3.max(rentComparisons, d => d.price)]).nice()\r\n                .range([height - margin.bottom, margin.top]);\r\n\r\n            const colorScale = d3.scaleOrdinal()\r\n                .domain([\"Flat\", \"House\"])\r\n                .range([\"#1f77b4\", \"#ff7f0e\"]);\r\n\r\n            d3.select(comparisonSvgRef.current).selectAll('*').remove();\r\n\r\n            const svg = d3.select(comparisonSvgRef.current)\r\n                .attr('width', width)\r\n                .attr('height', height);\r\n\r\n            svg.append('g')\r\n                .attr('transform', `translate(0,${height - margin.bottom})`)\r\n                .call(d3.axisBottom(xScale))\r\n                .selectAll(\"text\")\r\n                .attr(\"y\", 10)\r\n                .attr(\"dx\", xScale.bandwidth() / 4)\r\n                .style(\"text-anchor\", \"middle\");\r\n\r\n            svg.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"x\", width / 2)\r\n                .attr(\"y\", height - margin.bottom + 70)\r\n                .text(\"Suburb\");\r\n\r\n            svg.append('g')\r\n                .attr('transform', `translate(${margin.left},0)`)\r\n                .call(d3.axisLeft(yScale));\r\n\r\n            svg.append(\"text\")\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"transform\", `rotate(-90)`)\r\n                .attr(\"x\", -height / 2)\r\n                .attr(\"y\", margin.left - 40)\r\n                .text(\"Price per week (AUD)\");\r\n\r\n            // Draw columns for each suburb and house type\r\n            svg.selectAll(\".bar-group\")\r\n                .data(groupedData)\r\n                .join(\"g\")\r\n                .attr(\"class\", \"bar-group\")\r\n                .attr(\"transform\", d => `translate(${xScale(d[0])},0)`)\r\n                .selectAll(\"rect\")\r\n                .data(d => d[1])\r\n                .join(\"rect\")\r\n                .attr(\"class\", \"bar\")\r\n                .attr(\"x\", d => xScale.bandwidth() / 2 * (d.housing_type === \"Flat\" ? -1 : 1))\r\n                .attr(\"y\", d => yScale(d.price))\r\n                .attr(\"width\", xScale.bandwidth() / 2)\r\n                .attr(\"height\", d => height - margin.bottom - yScale(d.price))\r\n                .attr(\"fill\", d => colorScale(d.housing_type))\r\n                .on(\"mouseover\", (event, d) => {\r\n                    tooltip.transition().duration(200).style(\"opacity\", 0.9);\r\n                    tooltip.html(`Type: ${d.housing_type}<br>Price: AUD ${d.price.toFixed(2)}`)\r\n                        .style(\"left\", (event.pageX + 10) + \"px\")\r\n                        .style(\"top\", (event.pageY - 20) + \"px\");\r\n                })\r\n                .on(\"mouseout\", () => {\r\n                    tooltip.transition().duration(500).style(\"opacity\", 0);\r\n                })\r\n                .on(\"mousemove\", (event) => {\r\n                    tooltip.style(\"left\", (event.pageX + 10) + \"px\")\r\n                        .style(\"top\", (event.pageY - 20) + \"px\");\r\n                });\r\n\r\n            // Add legend for housing types\r\n            const legend = svg.append(\"g\")\r\n                .attr(\"transform\", `translate(${width - margin.right + 30}, ${margin.top})`);\r\n\r\n            legend.selectAll(\"rect\")\r\n                .data([\"Flat\", \"House\"])\r\n                .join(\"rect\")\r\n                .attr(\"x\", 0)\r\n                .attr(\"y\", (d, i) => i * 20)\r\n                .attr(\"width\", 15)\r\n                .attr(\"height\", 15)\r\n                .attr(\"fill\", d => colorScale(d));\r\n\r\n            legend.selectAll(\"text\")\r\n                .data([\"Flat\", \"House\"])\r\n                .join(\"text\")\r\n                .attr(\"x\", 20)\r\n                .attr(\"y\", (d, i) => i * 20 + 12)\r\n                .text(d => d);\r\n        }\r\n    }, [rentComparisons]);\r\n\r\n    return (\r\n        <div className='prediction-container'>\r\n            {loading ? (\r\n                <div className=\"loading-spinner\">Loading...</div>\r\n            ) : (\r\n                <>\r\n                    <h2>Generated rent predictions for a {numRooms} bedroom {houseType} in {normalizedSuburb} for the next {rentalPeriod} months</h2>\r\n                    <h3>Average rent per week would be {predictedPrice} AUD</h3>\r\n                    <div className='chart-container'>\r\n                        <div className='chart'>\r\n                            <h4>Historical Rent Prices (last 6 months):</h4>\r\n                            <svg ref={svgRef}></svg>\r\n                        </div>\r\n                        <div className='chart'>\r\n                            <h4>Rent Comparisons in Nearby Suburbs:</h4>\r\n                            <svg ref={comparisonSvgRef}></svg>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneratedRentPrediction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}