{"ast":null,"code":"var _jsxFileName = \"C:\\\\Innovation project\\\\HousingProject\\\\housingapp\\\\src\\\\MarketAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = [-37.8136, 144.9631]; // Melbourne's approximate center\n\nfunction MarketAnalysis() {\n  _s();\n  const [highSalesSuburbs, setHighSalesSuburbs] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await fetch('/highSalesSuburbs.geojson'); // Fetch from public folder\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const suburbData = await response.json();\n        setHighSalesSuburbs(suburbData); // GeoJSON data\n      } catch (error) {\n        console.error(\"Failed to fetch suburb data:\", error);\n      }\n    }\n    fetchData();\n  }, []);\n  const onEachFeature = (feature, layer) => {\n    if (feature.properties && feature.properties.suburb) {\n      var _feature$properties$a;\n      layer.bindPopup(`<strong>${feature.properties.suburb}</strong><br />Average Price: $${(_feature$properties$a = feature.properties.average_price) === null || _feature$properties$a === void 0 ? void 0 : _feature$properties$a.toLocaleString()}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Market Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: center,\n      zoom: 10,\n      style: {\n        height: '600px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), highSalesSuburbs && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: highSalesSuburbs,\n        style: () => ({\n          color: '#ff7800',\n          weight: 2,\n          fillColor: '#fffc00',\n          fillOpacity: 0.5\n        }),\n        onEachFeature: onEachFeature\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_s(MarketAnalysis, \"gpVFlyoSwQFXowb+dP7WQ81K4/A=\");\n_c = MarketAnalysis;\nexport default MarketAnalysis;\nvar _c;\n$RefreshReg$(_c, \"MarketAnalysis\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","GeoJSON","jsxDEV","_jsxDEV","center","MarketAnalysis","_s","highSalesSuburbs","setHighSalesSuburbs","fetchData","response","fetch","ok","Error","status","suburbData","json","error","console","onEachFeature","feature","layer","properties","suburb","_feature$properties$a","bindPopup","average_price","toLocaleString","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","zoom","url","attribution","data","color","weight","fillColor","fillOpacity","_c","$RefreshReg$"],"sources":["C:/Innovation project/HousingProject/housingapp/src/MarketAnalysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst center = [-37.8136, 144.9631]; // Melbourne's approximate center\r\n\r\nfunction MarketAnalysis() {\r\n    const [highSalesSuburbs, setHighSalesSuburbs] = useState(null);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const response = await fetch('/highSalesSuburbs.geojson'); // Fetch from public folder\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! Status: ${response.status}`);\r\n                }\r\n                const suburbData = await response.json();\r\n                setHighSalesSuburbs(suburbData); // GeoJSON data\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch suburb data:\", error);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const onEachFeature = (feature, layer) => {\r\n        if (feature.properties && feature.properties.suburb) {\r\n            layer.bindPopup(\r\n                `<strong>${feature.properties.suburb}</strong><br />Average Price: $${feature.properties.average_price?.toLocaleString()}`\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ height: '100vh', width: '100%' }}>\r\n            <h1>Market Analysis</h1>\r\n            <MapContainer center={center} zoom={10} style={{ height: '600px', width: '100%' }}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n                />\r\n                {highSalesSuburbs && (\r\n                    <GeoJSON\r\n                        data={highSalesSuburbs}\r\n                        style={() => ({\r\n                            color: '#ff7800',\r\n                            weight: 2,\r\n                            fillColor: '#fffc00',\r\n                            fillOpacity: 0.5,\r\n                        })}\r\n                        onEachFeature={onEachFeature}\r\n                    />\r\n                )}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MarketAnalysis;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,EAAEC,SAAS,EAAEC,OAAO,QAAQ,eAAe;AAChE,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAG,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;;AAErC,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE9DD,SAAS,CAAC,MAAM;IACZ,eAAeY,SAASA,CAAA,EAAG;MACvB,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2BAA2B,CAAC,CAAC,CAAC;QAC3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;QAC7D;QACA,MAAMC,UAAU,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACxCR,mBAAmB,CAACO,UAAU,CAAC,CAAC,CAAC;MACrC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACxD;IACJ;IACAR,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,aAAa,GAAGA,CAACC,OAAO,EAAEC,KAAK,KAAK;IACtC,IAAID,OAAO,CAACE,UAAU,IAAIF,OAAO,CAACE,UAAU,CAACC,MAAM,EAAE;MAAA,IAAAC,qBAAA;MACjDH,KAAK,CAACI,SAAS,CACX,WAAWL,OAAO,CAACE,UAAU,CAACC,MAAM,mCAAAC,qBAAA,GAAkCJ,OAAO,CAACE,UAAU,CAACI,aAAa,cAAAF,qBAAA,uBAAhCA,qBAAA,CAAkCG,cAAc,CAAC,CAAC,EAC5H,CAAC;IACL;EACJ,CAAC;EAED,oBACIxB,OAAA;IAAKyB,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC3C5B,OAAA;MAAA4B,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBhC,OAAA,CAACJ,YAAY;MAACK,MAAM,EAAEA,MAAO;MAACgC,IAAI,EAAE,EAAG;MAACR,KAAK,EAAE;QAAEC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAC,QAAA,gBAC9E5B,OAAA,CAACH,SAAS;QACNqC,GAAG,EAAC,oDAAoD;QACxDC,WAAW,EAAC;MAAyF;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxG,CAAC,EACD5B,gBAAgB,iBACbJ,OAAA,CAACF,OAAO;QACJsC,IAAI,EAAEhC,gBAAiB;QACvBqB,KAAK,EAAEA,CAAA,MAAO;UACVY,KAAK,EAAE,SAAS;UAChBC,MAAM,EAAE,CAAC;UACTC,SAAS,EAAE,SAAS;UACpBC,WAAW,EAAE;QACjB,CAAC,CAAE;QACHxB,aAAa,EAAEA;MAAc;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CACJ;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACS,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEd;AAAC7B,EAAA,CAlDQD,cAAc;AAAAuC,EAAA,GAAdvC,cAAc;AAoDvB,eAAeA,cAAc;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}