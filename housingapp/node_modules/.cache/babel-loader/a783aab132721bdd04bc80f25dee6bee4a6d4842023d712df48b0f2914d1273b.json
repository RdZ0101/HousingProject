{"ast":null,"code":"var _jsxFileName = \"C:\\\\Innovation project\\\\HousingProject\\\\housingapp\\\\src\\\\MarketAnalysis.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = [-37.8136, 144.9631]; // Melbourne's approximate center\n\nfunction MarketAnalysis() {\n  _s();\n  const [suburbBoundaries, setSuburbBoundaries] = useState(null);\n  const [highSalesData, setHighSalesData] = useState(null);\n\n  // Fetch both the suburb boundary GeoJSON and high sales data JSON\n  useEffect(() => {\n    const fetchBoundaries = async () => {\n      try {\n        const response = await fetch('/highSalesSuburbs.geojson'); // Fetch from public folder\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const geojsonData = await response.json();\n        setSuburbBoundaries(geojsonData);\n      } catch (error) {\n        console.error(\"Failed to fetch suburb boundaries:\", error);\n      }\n    };\n    const fetchHighSalesData = async () => {\n      try {\n        const response = await fetch('/highSalesSuburbs.json'); // Fetch from public folder\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const salesData = await response.json();\n        setHighSalesData(salesData);\n      } catch (error) {\n        console.error(\"Failed to fetch high sales data:\", error);\n      }\n    };\n    fetchBoundaries();\n    fetchHighSalesData();\n  }, []);\n\n  // Function to style polygons based on whether they are in high sales data\n  const styleFeature = feature => {\n    const suburbName = feature.properties && feature.properties.suburb;\n    const isHighSalesSuburb = highSalesData === null || highSalesData === void 0 ? void 0 : highSalesData.some(data => data.suburb === suburbName);\n    return {\n      color: isHighSalesSuburb ? '#ff7800' : '#333',\n      weight: 2,\n      fillColor: isHighSalesSuburb ? '#fffc00' : '#ccc',\n      fillOpacity: isHighSalesSuburb ? 0.6 : 0.2\n    };\n  };\n\n  // Function to display popup information\n  const onEachFeature = (feature, layer) => {\n    const suburbName = feature.properties && feature.properties.suburb;\n    const highSalesSuburb = highSalesData === null || highSalesData === void 0 ? void 0 : highSalesData.find(data => data.suburb === suburbName);\n    if (highSalesSuburb) {\n      layer.bindPopup(`<strong>${highSalesSuburb.suburb}</strong><br />\n                Average Price: $${highSalesSuburb.average_price.toLocaleString()}`);\n    } else {\n      layer.bindPopup(`<strong>${suburbName}</strong><br />No high sales data available.`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Market Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: center,\n      zoom: 10,\n      style: {\n        height: '600px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), suburbBoundaries && highSalesData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: suburbBoundaries,\n        style: styleFeature,\n        onEachFeature: onEachFeature\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n_s(MarketAnalysis, \"UabGZn5d63QhZlxyqeQaP2Y826M=\");\n_c = MarketAnalysis;\nexport default MarketAnalysis;\nvar _c;\n$RefreshReg$(_c, \"MarketAnalysis\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","GeoJSON","jsxDEV","_jsxDEV","center","MarketAnalysis","_s","suburbBoundaries","setSuburbBoundaries","highSalesData","setHighSalesData","fetchBoundaries","response","fetch","ok","Error","status","geojsonData","json","error","console","fetchHighSalesData","salesData","styleFeature","feature","suburbName","properties","suburb","isHighSalesSuburb","some","data","color","weight","fillColor","fillOpacity","onEachFeature","layer","highSalesSuburb","find","bindPopup","average_price","toLocaleString","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","zoom","url","attribution","_c","$RefreshReg$"],"sources":["C:/Innovation project/HousingProject/housingapp/src/MarketAnalysis.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nconst center = [-37.8136, 144.9631]; // Melbourne's approximate center\r\n\r\nfunction MarketAnalysis() {\r\n    const [suburbBoundaries, setSuburbBoundaries] = useState(null);\r\n    const [highSalesData, setHighSalesData] = useState(null);\r\n\r\n    // Fetch both the suburb boundary GeoJSON and high sales data JSON\r\n    useEffect(() => {\r\n        const fetchBoundaries = async () => {\r\n            try {\r\n                const response = await fetch('/highSalesSuburbs.geojson'); // Fetch from public folder\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! Status: ${response.status}`);\r\n                }\r\n                const geojsonData = await response.json();\r\n                setSuburbBoundaries(geojsonData);\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch suburb boundaries:\", error);\r\n            }\r\n        };\r\n\r\n        const fetchHighSalesData = async () => {\r\n            try {\r\n                const response = await fetch('/highSalesSuburbs.json'); // Fetch from public folder\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! Status: ${response.status}`);\r\n                }\r\n                const salesData = await response.json();\r\n                setHighSalesData(salesData);\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch high sales data:\", error);\r\n            }\r\n        };\r\n\r\n        fetchBoundaries();\r\n        fetchHighSalesData();\r\n    }, []);\r\n\r\n    // Function to style polygons based on whether they are in high sales data\r\n    const styleFeature = (feature) => {\r\n        const suburbName = feature.properties && feature.properties.suburb;\r\n        const isHighSalesSuburb = highSalesData?.some((data) => data.suburb === suburbName);\r\n\r\n        return {\r\n            color: isHighSalesSuburb ? '#ff7800' : '#333',\r\n            weight: 2,\r\n            fillColor: isHighSalesSuburb ? '#fffc00' : '#ccc',\r\n            fillOpacity: isHighSalesSuburb ? 0.6 : 0.2,\r\n        };\r\n    };\r\n\r\n    // Function to display popup information\r\n    const onEachFeature = (feature, layer) => {\r\n        const suburbName = feature.properties && feature.properties.suburb;\r\n        const highSalesSuburb = highSalesData?.find((data) => data.suburb === suburbName);\r\n\r\n        if (highSalesSuburb) {\r\n            layer.bindPopup(\r\n                `<strong>${highSalesSuburb.suburb}</strong><br />\r\n                Average Price: $${highSalesSuburb.average_price.toLocaleString()}`\r\n            );\r\n        } else {\r\n            layer.bindPopup(`<strong>${suburbName}</strong><br />No high sales data available.`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ height: '100vh', width: '100%' }}>\r\n            <h1>Market Analysis</h1>\r\n            <MapContainer center={center} zoom={10} style={{ height: '600px', width: '100%' }}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n                />\r\n                {suburbBoundaries && highSalesData && (\r\n                    <GeoJSON\r\n                        data={suburbBoundaries}\r\n                        style={styleFeature}\r\n                        onEachFeature={onEachFeature}\r\n                    />\r\n                )}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MarketAnalysis;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}