{"ast":null,"code":"var _jsxFileName = \"C:\\\\HousingProject\\\\housingapp\\\\src\\\\GeneratedRentPredictions.js\",\n  _s = $RefreshSig$();\n// GeneratedRentPrediction.js\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport './Prediction.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratedRentPrediction = () => {\n  _s();\n  const location = useLocation();\n  const {\n    suburb,\n    houseType,\n    numRooms,\n    rentalPeriod,\n    predictedPrice\n  } = location.state || {};\n  const normalizedSuburb = suburb.toLowerCase() // Convert the entire string to lowercase first\n  .split(' ') // Split by spaces to get each word\n  .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // Capitalize first letter of each word\n  .join(' '); // Join words back with spaces\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prediction-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Generated rent predictions for a \", numRooms, \" bedroom \", houseType, \" in \", normalizedSuburb, \" for the next \", rentalPeriod, \" months\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Average rent per week would be \", predictedPrice, \" AUD\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n_s(GeneratedRentPrediction, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = GeneratedRentPrediction;\nexport default GeneratedRentPrediction;\nvar _c;\n$RefreshReg$(_c, \"GeneratedRentPrediction\");","map":{"version":3,"names":["React","useLocation","jsxDEV","_jsxDEV","GeneratedRentPrediction","_s","location","suburb","houseType","numRooms","rentalPeriod","predictedPrice","state","normalizedSuburb","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/HousingProject/housingapp/src/GeneratedRentPredictions.js"],"sourcesContent":["// GeneratedRentPrediction.js\r\nimport React from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport './Prediction.css';\r\n\r\nconst GeneratedRentPrediction = () => {\r\n    const location = useLocation();\r\n    const { suburb, houseType, numRooms, rentalPeriod, predictedPrice } = location.state || {};\r\n    const normalizedSuburb = suburb\r\n    .toLowerCase()                 // Convert the entire string to lowercase first\r\n    .split(' ')                    // Split by spaces to get each word\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))  // Capitalize first letter of each word\r\n    .join(' ');                    // Join words back with spaces\r\n\r\n    return (\r\n        <div className='prediction-container'>\r\n            <h2>Generated rent predictions for a {numRooms} bedroom {houseType} in {normalizedSuburb} for the next {rentalPeriod} months</h2>\r\n            <h3>Average rent per week would be {predictedPrice} AUD</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GeneratedRentPrediction;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEM,MAAM;IAAEC,SAAS;IAAEC,QAAQ;IAAEC,YAAY;IAAEC;EAAe,CAAC,GAAGL,QAAQ,CAACM,KAAK,IAAI,CAAC,CAAC;EAC1F,MAAMC,gBAAgB,GAAGN,MAAM,CAC9BO,WAAW,CAAC,CAAC,CAAiB;EAAA,CAC9BC,KAAK,CAAC,GAAG,CAAC,CAAoB;EAAA,CAC9BC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE;EAAA,CAC3DC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAoB;;EAE/B,oBACIlB,OAAA;IAAKmB,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBACjCpB,OAAA;MAAAoB,QAAA,GAAI,mCAAiC,EAACd,QAAQ,EAAC,WAAS,EAACD,SAAS,EAAC,MAAI,EAACK,gBAAgB,EAAC,gBAAc,EAACH,YAAY,EAAC,SAAO;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjIxB,OAAA;MAAAoB,QAAA,GAAI,iCAA+B,EAACZ,cAAc,EAAC,MAAI;IAAA;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3D,CAAC;AAEd,CAAC;AAACtB,EAAA,CAfID,uBAAuB;EAAA,QACRH,WAAW;AAAA;AAAA2B,EAAA,GAD1BxB,uBAAuB;AAiB7B,eAAeA,uBAAuB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}